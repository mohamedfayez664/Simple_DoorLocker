
door_look.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  00001e5c  00001ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  008001c2  008001c2  00002052  2**0
                  ALLOC
  3 .stab         00002bec  00000000  00000000  00002054  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001566  00000000  00000000  00004c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000061a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00006386  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  000065b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00008e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000a471  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000b850  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000ba50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000bd5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__vector_1>
       8:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__vector_5>
      18:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_18>
      4c:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3e       	cpi	r26, 0xEE	; 238
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <main>
      8a:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ea       	ldi	r26, 0xA9	; 169
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 ea       	ldi	r24, 0xA9	; 169
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 ea       	ldi	r22, 0xA9	; 169
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__gesf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__gesf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__gesf2+0x58>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ef 54       	subi	r30, 0x4F	; 79
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <DELAY_init>:


/////////////////////////
void DELAY_init (){
	////timer2 init
	TCNT2=0;              //initial
     f4a:	14 bc       	out	0x24, r1	; 36
	OCR2 =125 ;           //initial compare value 
     f4c:	8d e7       	ldi	r24, 0x7D	; 125
     f4e:	83 bd       	out	0x23, r24	; 35
	//>>for f_cpu 1 and 8 M  ,,,pre_scaler 8 and in mili seconds
	//it will over every 1 mili_second>>(1/1M/pre) >>8 usec per every count
	//>>> com = 1000/8 -> 125 >>    8usec * 125 =1000 usec

	TCCR2 = (1<<FOC2) | (1<<WGM21);  //clock is zero to make timer un_active
     f50:	88 e8       	ldi	r24, 0x88	; 136
     f52:	85 bd       	out	0x25, r24	; 37
}
     f54:	08 95       	ret

00000f56 <DELAY_ms>:

void DELAY_ms   (uint16 number_of_ms){
     f56:	9c 01       	movw	r18, r24

	if(number_of_ms >0 ){
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	91 f0       	breq	.+36     	; 0xf80 <DELAY_ms+0x2a>
		TCCR2 =(TCCR2 & 0xf8) | (F_CPU_Pre & 0x07); //to run timer enter clock(2for 1M ,3 to 8M)
     f5c:	85 b5       	in	r24, 0x25	; 37
     f5e:	88 7f       	andi	r24, 0xF8	; 248
     f60:	83 60       	ori	r24, 0x03	; 3
     f62:	85 bd       	out	0x25, r24	; 37
		                                            // tcnt2 = 0 ;;;;;;

		while (number_of_ms--){

			while(BIT_IS_CLEAR(TIFR,OCF2) );
     f64:	08 b6       	in	r0, 0x38	; 56
     f66:	07 fe       	sbrs	r0, 7
     f68:	fd cf       	rjmp	.-6      	; 0xf64 <DELAY_ms+0xe>
			SET_BIT(TIFR,OCF2) ;      //to make it = 0 again
     f6a:	88 b7       	in	r24, 0x38	; 56
     f6c:	80 68       	ori	r24, 0x80	; 128
     f6e:	88 bf       	out	0x38, r24	; 56
			TCNT2 = 0;         //to clear timer
     f70:	14 bc       	out	0x24, r1	; 36
     f72:	21 50       	subi	r18, 0x01	; 1
     f74:	30 40       	sbci	r19, 0x00	; 0

	if(number_of_ms >0 ){
		TCCR2 =(TCCR2 & 0xf8) | (F_CPU_Pre & 0x07); //to run timer enter clock(2for 1M ,3 to 8M)
		                                            // tcnt2 = 0 ;;;;;;

		while (number_of_ms--){
     f76:	b1 f7       	brne	.-20     	; 0xf64 <DELAY_ms+0xe>
			while(BIT_IS_CLEAR(TIFR,OCF2) );
			SET_BIT(TIFR,OCF2) ;      //to make it = 0 again
			TCNT2 = 0;         //to clear timer
		}

		TCCR2&=~0x07;      //to turn timer off >> clear clock
     f78:	85 b5       	in	r24, 0x25	; 37
     f7a:	88 7f       	andi	r24, 0xF8	; 248
     f7c:	85 bd       	out	0x25, r24	; 37
		TCNT2 = 0;         //to clear timer
     f7e:	14 bc       	out	0x24, r1	; 36
     f80:	08 95       	ret

00000f82 <DELAY_sec>:
	}
} 


void DELAY_sec  (uint16 number_of_sec){
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	ec 01       	movw	r28, r24

	if(number_of_sec > 0 ){
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	31 f0       	breq	.+12     	; 0xf98 <DELAY_sec+0x16>
		while (number_of_sec--)
			DELAY_ms   (1000);
     f8c:	88 ee       	ldi	r24, 0xE8	; 232
     f8e:	93 e0       	ldi	r25, 0x03	; 3
     f90:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
     f94:	21 97       	sbiw	r28, 0x01	; 1


void DELAY_sec  (uint16 number_of_sec){

	if(number_of_sec > 0 ){
		while (number_of_sec--)
     f96:	d1 f7       	brne	.-12     	; 0xf8c <DELAY_sec+0xa>
			DELAY_ms   (1000);
	}
}
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <IN_EEPROM_WriteByte>:
#include "internal_eeprom.h"

void IN_EEPROM_WriteByte(uint16 addr ,uint8 data )
{
	while(BIT_IS_SET(EECR,EEWE));//
     f9e:	e1 99       	sbic	0x1c, 1	; 28
     fa0:	fe cf       	rjmp	.-4      	; 0xf9e <IN_EEPROM_WriteByte>

	EEAR = addr;
     fa2:	9f bb       	out	0x1f, r25	; 31
     fa4:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     fa6:	6d bb       	out	0x1d, r22	; 29
	EECR  = (1 << EEMWE);   //EECR=0;
     fa8:	84 e0       	ldi	r24, 0x04	; 4
     faa:	8c bb       	out	0x1c, r24	; 28
	SET_BIT(EECR,EEWE);
     fac:	e1 9a       	sbi	0x1c, 1	; 28
}
     fae:	08 95       	ret

00000fb0 <IN_EEPROM_ReadByte>:

uint8 IN_EEPROM_ReadByte(uint16 addr )
{
	while(BIT_IS_SET(EECR,EEWE));
     fb0:	e1 99       	sbic	0x1c, 1	; 28
     fb2:	fe cf       	rjmp	.-4      	; 0xfb0 <IN_EEPROM_ReadByte>

	EEAR = addr;
     fb4:	9f bb       	out	0x1f, r25	; 31
     fb6:	8e bb       	out	0x1e, r24	; 30
	EECR = 1 << EERE;  //EECR=0;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	8c bb       	out	0x1c, r24	; 28

	return EEDR;
     fbc:	8d b3       	in	r24, 0x1d	; 29
}
     fbe:	08 95       	ret

00000fc0 <IN_EEPROM_WriteBytes>:
void IN_EEPROM_WriteBytes(uint16 addr ,uint8 *data ,uint8 data_size )
{
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	ec 01       	movw	r28, r24
     fcc:	7b 01       	movw	r14, r22
     fce:	14 2f       	mov	r17, r20
	while(data_size !=  0)
     fd0:	44 23       	and	r20, r20
     fd2:	49 f0       	breq	.+18     	; 0xfe6 <IN_EEPROM_WriteBytes+0x26>
	{
		IN_EEPROM_WriteByte(addr,*data);    //Write a byte from RAM to EEPROM
     fd4:	ce 01       	movw	r24, r28
     fd6:	f7 01       	movw	r30, r14
     fd8:	61 91       	ld	r22, Z+
     fda:	7f 01       	movw	r14, r30
     fdc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <IN_EEPROM_WriteByte>
		addr++;				                 //Increment the Eeprom Address
     fe0:	21 96       	adiw	r28, 0x01	; 1
		data++;				                 //Increment the RAM Address
		data_size--;					     //Decrement NoOfBytes after writing each Byte
     fe2:	11 50       	subi	r17, 0x01	; 1

	return EEDR;
}
void IN_EEPROM_WriteBytes(uint16 addr ,uint8 *data ,uint8 data_size )
{
	while(data_size !=  0)
     fe4:	b9 f7       	brne	.-18     	; 0xfd4 <IN_EEPROM_WriteBytes+0x14>
		IN_EEPROM_WriteByte(addr,*data);    //Write a byte from RAM to EEPROM
		addr++;				                 //Increment the Eeprom Address
		data++;				                 //Increment the RAM Address
		data_size--;					     //Decrement NoOfBytes after writing each Byte
	}
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	08 95       	ret

00000ff2 <IN_EEPROM_ReadBytes>:
void IN_EEPROM_ReadBytes(uint16 addr, uint8_t *data, uint8 data_size)
{
     ff2:	9c 01       	movw	r18, r24
     ff4:	fb 01       	movw	r30, r22
	while(data_size !=  0)
     ff6:	44 23       	and	r20, r20
     ff8:	71 f0       	breq	.+28     	; 0x1016 <IN_EEPROM_ReadBytes+0x24>
uint8 IN_EEPROM_ReadByte(uint16 addr )
{
	while(BIT_IS_SET(EECR,EEWE));

	EEAR = addr;
	EECR = 1 << EERE;  //EECR=0;
     ffa:	91 e0       	ldi	r25, 0x01	; 1
	SET_BIT(EECR,EEWE);
}

uint8 IN_EEPROM_ReadByte(uint16 addr )
{
	while(BIT_IS_SET(EECR,EEWE));
     ffc:	e1 99       	sbic	0x1c, 1	; 28
     ffe:	fe cf       	rjmp	.-4      	; 0xffc <IN_EEPROM_ReadBytes+0xa>

	EEAR = addr;
    1000:	3f bb       	out	0x1f, r19	; 31
    1002:	2e bb       	out	0x1e, r18	; 30
	EECR = 1 << EERE;  //EECR=0;
    1004:	9c bb       	out	0x1c, r25	; 28

	return EEDR;
    1006:	8d b3       	in	r24, 0x1d	; 29
}
void IN_EEPROM_ReadBytes(uint16 addr, uint8_t *data, uint8 data_size)
{
	while(data_size !=  0)
	{
		*data = IN_EEPROM_ReadByte(addr); //Read a byte from EEPROM to RAM
    1008:	80 83       	st	Z, r24
		addr++;						   //Increment the EEPROM Address
		data++;						   //Increment the RAM Address
		data_size--;				   //Decrement NoOfBytes after Reading each Byte
    100a:	41 50       	subi	r20, 0x01	; 1
		data_size--;					     //Decrement NoOfBytes after writing each Byte
	}
}
void IN_EEPROM_ReadBytes(uint16 addr, uint8_t *data, uint8 data_size)
{
	while(data_size !=  0)
    100c:	21 f0       	breq	.+8      	; 0x1016 <IN_EEPROM_ReadBytes+0x24>
	{
		*data = IN_EEPROM_ReadByte(addr); //Read a byte from EEPROM to RAM
		addr++;						   //Increment the EEPROM Address
    100e:	2f 5f       	subi	r18, 0xFF	; 255
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
		data++;						   //Increment the RAM Address
    1012:	31 96       	adiw	r30, 0x01	; 1
    1014:	f3 cf       	rjmp	.-26     	; 0xffc <IN_EEPROM_ReadBytes+0xa>
    1016:	08 95       	ret

00001018 <EEPROM_Erase>:
		data_size--;				   //Decrement NoOfBytes after Reading each Byte
	}
}

void EEPROM_Erase()
{
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	c0 e0       	ldi	r28, 0x00	; 0
    101e:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t addr  , MaxEepromSize_U16 = 1024;

	for(addr=0; addr< MaxEepromSize_U16; addr++)
	{
		IN_EEPROM_WriteByte(addr,0xffu); // Write Each memory location with OxFF
    1020:	ce 01       	movw	r24, r28
    1022:	6f ef       	ldi	r22, 0xFF	; 255
    1024:	0e 94 cf 07 	call	0xf9e	; 0xf9e <IN_EEPROM_WriteByte>

void EEPROM_Erase()
{
	uint16_t addr  , MaxEepromSize_U16 = 1024;

	for(addr=0; addr< MaxEepromSize_U16; addr++)
    1028:	21 96       	adiw	r28, 0x01	; 1
    102a:	84 e0       	ldi	r24, 0x04	; 4
    102c:	c0 30       	cpi	r28, 0x00	; 0
    102e:	d8 07       	cpc	r29, r24
    1030:	b9 f7       	brne	.-18     	; 0x1020 <EEPROM_Erase+0x8>
	{
		IN_EEPROM_WriteByte(addr,0xffu); // Write Each memory location with OxFF
	}
}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <INT0_Init>:
static volatile void (*g_INT0_CallBackPtr)(void) = NULL;
static volatile void (*g_INT1_CallBackPtr)(void) = NULL;
static volatile void (*g_INT2_CallBackPtr)(void) = NULL;

void INT0_Init(INTERRUPT_Config *Config_Ptr)
{
    1038:	fc 01       	movw	r30, r24
	DDRD &= ~(1<<2);  //enable external interrupt 0
    103a:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (Config_Ptr->pull<<2); //enable pull up for interrupt 0
    103c:	92 b3       	in	r25, 0x12	; 18
    103e:	81 81       	ldd	r24, Z+1	; 0x01
    1040:	88 0f       	add	r24, r24
    1042:	88 0f       	add	r24, r24
    1044:	89 2b       	or	r24, r25
    1046:	82 bb       	out	0x12, r24	; 18

	MCUCR=(MCUCR&0xfc)|(Config_Ptr->edge&0x03); //edge for rising or falling edge
    1048:	95 b7       	in	r25, 0x35	; 53
    104a:	80 81       	ld	r24, Z
    104c:	83 70       	andi	r24, 0x03	; 3
    104e:	9c 7f       	andi	r25, 0xFC	; 252
    1050:	89 2b       	or	r24, r25
    1052:	85 bf       	out	0x35, r24	; 53
	GICR |=(1<<INT0); //enable interrupt 0 module
    1054:	8b b7       	in	r24, 0x3b	; 59
    1056:	80 64       	ori	r24, 0x40	; 64
    1058:	8b bf       	out	0x3b, r24	; 59
}
    105a:	08 95       	ret

0000105c <INT0_CallBack>:
void INT0_CallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_INT0_CallBackPtr = a_ptr;
    105c:	90 93 c8 01 	sts	0x01C8, r25
    1060:	80 93 c7 01 	sts	0x01C7, r24
}
    1064:	08 95       	ret

00001066 <__vector_1>:
ISR(INT0_vect)
{
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
	if(g_INT0_CallBackPtr != NULL)
    1088:	e0 91 c7 01 	lds	r30, 0x01C7
    108c:	f0 91 c8 01 	lds	r31, 0x01C8
    1090:	30 97       	sbiw	r30, 0x00	; 0
    1092:	09 f0       	breq	.+2      	; 0x1096 <__vector_1+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT0_CallBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    1094:	09 95       	icall
	}
}
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	bf 91       	pop	r27
    109c:	af 91       	pop	r26
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	7f 91       	pop	r23
    10a4:	6f 91       	pop	r22
    10a6:	5f 91       	pop	r21
    10a8:	4f 91       	pop	r20
    10aa:	3f 91       	pop	r19
    10ac:	2f 91       	pop	r18
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <INT1_Init>:

////////////////////////////////////////////////////
void INT1_Init(INTERRUPT_Config *Config_Ptr)
{
    10b8:	fc 01       	movw	r30, r24
	DDRD &= ~(1<<3);   // pin
    10ba:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (Config_Ptr->pull<<3);   //enable pull up for interrupt 1
    10bc:	92 b3       	in	r25, 0x12	; 18
    10be:	81 81       	ldd	r24, Z+1	; 0x01
    10c0:	88 0f       	add	r24, r24
    10c2:	88 0f       	add	r24, r24
    10c4:	88 0f       	add	r24, r24
    10c6:	89 2b       	or	r24, r25
    10c8:	82 bb       	out	0x12, r24	; 18

	//flags
    MCUCR=(MCUCR&0xf3)|((Config_Ptr->edge&0x03)<<2);
    10ca:	25 b7       	in	r18, 0x35	; 53
    10cc:	80 81       	ld	r24, Z
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	83 70       	andi	r24, 0x03	; 3
    10d2:	90 70       	andi	r25, 0x00	; 0
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	23 7f       	andi	r18, 0xF3	; 243
    10de:	28 2b       	or	r18, r24
    10e0:	25 bf       	out	0x35, r18	; 53
    GICR |=(1<<INT1);  //module
    10e2:	8b b7       	in	r24, 0x3b	; 59
    10e4:	80 68       	ori	r24, 0x80	; 128
    10e6:	8b bf       	out	0x3b, r24	; 59
}
    10e8:	08 95       	ret

000010ea <INT1_CallBack>:
void INT1_CallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_INT1_CallBackPtr = a_ptr;
    10ea:	90 93 c6 01 	sts	0x01C6, r25
    10ee:	80 93 c5 01 	sts	0x01C5, r24
}
    10f2:	08 95       	ret

000010f4 <__vector_2>:
ISR(INT1_vect)
{
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	2f 93       	push	r18
    1100:	3f 93       	push	r19
    1102:	4f 93       	push	r20
    1104:	5f 93       	push	r21
    1106:	6f 93       	push	r22
    1108:	7f 93       	push	r23
    110a:	8f 93       	push	r24
    110c:	9f 93       	push	r25
    110e:	af 93       	push	r26
    1110:	bf 93       	push	r27
    1112:	ef 93       	push	r30
    1114:	ff 93       	push	r31
	if(g_INT1_CallBackPtr != NULL)
    1116:	e0 91 c5 01 	lds	r30, 0x01C5
    111a:	f0 91 c6 01 	lds	r31, 0x01C6
    111e:	30 97       	sbiw	r30, 0x00	; 0
    1120:	09 f0       	breq	.+2      	; 0x1124 <__vector_2+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT1_CallBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    1122:	09 95       	icall
	}
}
    1124:	ff 91       	pop	r31
    1126:	ef 91       	pop	r30
    1128:	bf 91       	pop	r27
    112a:	af 91       	pop	r26
    112c:	9f 91       	pop	r25
    112e:	8f 91       	pop	r24
    1130:	7f 91       	pop	r23
    1132:	6f 91       	pop	r22
    1134:	5f 91       	pop	r21
    1136:	4f 91       	pop	r20
    1138:	3f 91       	pop	r19
    113a:	2f 91       	pop	r18
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	0f 90       	pop	r0
    1142:	1f 90       	pop	r1
    1144:	18 95       	reti

00001146 <INT2_Init>:
////////////////////////////////////////////////////
void INT2_Init(INTERRUPT_Config *Config_Ptr)
{
    1146:	fc 01       	movw	r30, r24
	DDRB &= ~(1<<2);
    1148:	ba 98       	cbi	0x17, 2	; 23
	PORTB|=  (Config_Ptr->pull<<2);
    114a:	98 b3       	in	r25, 0x18	; 24
    114c:	81 81       	ldd	r24, Z+1	; 0x01
    114e:	88 0f       	add	r24, r24
    1150:	88 0f       	add	r24, r24
    1152:	89 2b       	or	r24, r25
    1154:	88 bb       	out	0x18, r24	; 24

    MCUCSR=(MCUCSR&0xbf)|((Config_Ptr->edge&0x01)<<ISC2); //<<6
    1156:	24 b7       	in	r18, 0x34	; 52
    1158:	80 81       	ld	r24, Z
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	81 70       	andi	r24, 0x01	; 1
    115e:	90 70       	andi	r25, 0x00	; 0
    1160:	00 24       	eor	r0, r0
    1162:	96 95       	lsr	r25
    1164:	87 95       	ror	r24
    1166:	07 94       	ror	r0
    1168:	96 95       	lsr	r25
    116a:	87 95       	ror	r24
    116c:	07 94       	ror	r0
    116e:	98 2f       	mov	r25, r24
    1170:	80 2d       	mov	r24, r0
    1172:	2f 7b       	andi	r18, 0xBF	; 191
    1174:	28 2b       	or	r18, r24
    1176:	24 bf       	out	0x34, r18	; 52
    GICR |=(1<<INT2);
    1178:	8b b7       	in	r24, 0x3b	; 59
    117a:	80 62       	ori	r24, 0x20	; 32
    117c:	8b bf       	out	0x3b, r24	; 59
}
    117e:	08 95       	ret

00001180 <INT2_CallBack>:
void INT2_CallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_INT2_CallBackPtr = a_ptr;
    1180:	90 93 c4 01 	sts	0x01C4, r25
    1184:	80 93 c3 01 	sts	0x01C3, r24
}
    1188:	08 95       	ret

0000118a <__vector_18>:
ISR(INT2_vect)
{
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	if(g_INT2_CallBackPtr != NULL)
    11ac:	e0 91 c3 01 	lds	r30, 0x01C3
    11b0:	f0 91 c4 01 	lds	r31, 0x01C4
    11b4:	30 97       	sbiw	r30, 0x00	; 0
    11b6:	09 f0       	breq	.+2      	; 0x11ba <__vector_18+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT2_CallBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    11b8:	09 95       	icall
	}
}
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	7f 91       	pop	r23
    11c8:	6f 91       	pop	r22
    11ca:	5f 91       	pop	r21
    11cc:	4f 91       	pop	r20
    11ce:	3f 91       	pop	r19
    11d0:	2f 91       	pop	r18
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <INT_Deinit>:

////////////////////////////////////////////////////
void INT_Deinit(uint8 interrupts_det)
{
    /*clear specified interrupts*/    
	GICR &=~(interrupts_det<<5);
    11dc:	9b b7       	in	r25, 0x3b	; 59
    11de:	82 95       	swap	r24
    11e0:	88 0f       	add	r24, r24
    11e2:	80 7e       	andi	r24, 0xE0	; 224
    11e4:	80 95       	com	r24
    11e6:	98 23       	and	r25, r24
    11e8:	9b bf       	out	0x3b, r25	; 59
}
    11ea:	08 95       	ret

000011ec <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0X10<<col);       /* & 0xf0 */
    11f0:	60 e1       	ldi	r22, 0x10	; 16
    11f2:	70 e0       	ldi	r23, 0x00	; 0
			
			/* 
			 * clear the output (pin) column in this trace and enable the internal
			 * pull up resistors for the rows pins ,,,,,and for the columns..../////
			 */ 
			KEYPAD_PORT_OUT = 0x0f;        /* ( (~(0X10<<col)) );*/
    11f4:	ef e0       	ldi	r30, 0x0F	; 15
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0X10<<col);       /* & 0xf0 */
    11f6:	cb 01       	movw	r24, r22
    11f8:	04 2e       	mov	r0, r20
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <KeyPad_getPressedKey+0x14>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <KeyPad_getPressedKey+0x10>
    1204:	8a bb       	out	0x1a, r24	; 26
			
			/* 
			 * clear the output (pin) column in this trace and enable the internal
			 * pull up resistors for the rows pins ,,,,,and for the columns..../////
			 */ 
			KEYPAD_PORT_OUT = 0x0f;        /* ( (~(0X10<<col)) );*/
    1206:	eb bb       	out	0x1b, r30	; 27
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0

			for(row=0;row<N_row;row++)     /* loop for rows */
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    120c:	89 b3       	in	r24, 0x19	; 25
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <KeyPad_getPressedKey+0x2c>
    1214:	95 95       	asr	r25
    1216:	87 95       	ror	r24
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <KeyPad_getPressedKey+0x28>
    121c:	80 ff       	sbrs	r24, 0
    121e:	0d c0       	rjmp	.+26     	; 0x123a <KeyPad_getPressedKey+0x4e>

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
	switch(button_number)
    1220:	2f 5f       	subi	r18, 0xFF	; 255
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
			 * clear the output (pin) column in this trace and enable the internal
			 * pull up resistors for the rows pins ,,,,,and for the columns..../////
			 */ 
			KEYPAD_PORT_OUT = 0x0f;        /* ( (~(0X10<<col)) );*/

			for(row=0;row<N_row;row++)     /* loop for rows */
    1224:	24 30       	cpi	r18, 0x04	; 4
    1226:	31 05       	cpc	r19, r1
    1228:	89 f7       	brne	.-30     	; 0x120c <KeyPad_getPressedKey+0x20>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    122a:	4f 5f       	subi	r20, 0xFF	; 255
    122c:	44 30       	cpi	r20, 0x04	; 4
    122e:	10 f4       	brcc	.+4      	; 0x1234 <KeyPad_getPressedKey+0x48>

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1230:	54 2f       	mov	r21, r20
    1232:	e1 cf       	rjmp	.-62     	; 0x11f6 <KeyPad_getPressedKey+0xa>
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	50 e0       	ldi	r21, 0x00	; 0
    1238:	de cf       	rjmp	.-68     	; 0x11f6 <KeyPad_getPressedKey+0xa>
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber( (row*N_col)+col+1 ); /*exit from loop*/
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);   /*exit from loop*/
    123a:	85 2f       	mov	r24, r21
    123c:	8f 5f       	subi	r24, 0xFF	; 255
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	22 0f       	add	r18, r18
    1244:	33 1f       	adc	r19, r19
    1246:	82 0f       	add	r24, r18

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
	switch(button_number)
    1248:	88 30       	cpi	r24, 0x08	; 8
    124a:	d9 f1       	breq	.+118    	; 0x12c2 <KeyPad_getPressedKey+0xd6>
    124c:	89 30       	cpi	r24, 0x09	; 9
    124e:	58 f0       	brcs	.+22     	; 0x1266 <KeyPad_getPressedKey+0x7a>
    1250:	8c 30       	cpi	r24, 0x0C	; 12
    1252:	79 f1       	breq	.+94     	; 0x12b2 <KeyPad_getPressedKey+0xc6>
    1254:	8d 30       	cpi	r24, 0x0D	; 13
    1256:	88 f0       	brcs	.+34     	; 0x127a <KeyPad_getPressedKey+0x8e>
    1258:	8f 30       	cpi	r24, 0x0F	; 15
    125a:	79 f1       	breq	.+94     	; 0x12ba <KeyPad_getPressedKey+0xce>
    125c:	80 31       	cpi	r24, 0x10	; 16
    125e:	59 f1       	breq	.+86     	; 0x12b6 <KeyPad_getPressedKey+0xca>
    1260:	8e 30       	cpi	r24, 0x0E	; 14
    1262:	f9 f0       	breq	.+62     	; 0x12a2 <KeyPad_getPressedKey+0xb6>
					#endif
				}
			}
		}
	}	
}
    1264:	08 95       	ret

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
	switch(button_number)
    1266:	84 30       	cpi	r24, 0x04	; 4
    1268:	51 f1       	breq	.+84     	; 0x12be <KeyPad_getPressedKey+0xd2>
    126a:	85 30       	cpi	r24, 0x05	; 5
    126c:	60 f0       	brcs	.+24     	; 0x1286 <KeyPad_getPressedKey+0x9a>
    126e:	86 30       	cpi	r24, 0x06	; 6
    1270:	d1 f0       	breq	.+52     	; 0x12a6 <KeyPad_getPressedKey+0xba>
    1272:	87 30       	cpi	r24, 0x07	; 7
    1274:	a0 f0       	brcs	.+40     	; 0x129e <KeyPad_getPressedKey+0xb2>
    1276:	86 e0       	ldi	r24, 0x06	; 6
    1278:	08 95       	ret
    127a:	8a 30       	cpi	r24, 0x0A	; 10
    127c:	b1 f0       	breq	.+44     	; 0x12aa <KeyPad_getPressedKey+0xbe>
    127e:	8b 30       	cpi	r24, 0x0B	; 11
    1280:	60 f0       	brcs	.+24     	; 0x129a <KeyPad_getPressedKey+0xae>
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	08 95       	ret
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	91 f0       	breq	.+36     	; 0x12ae <KeyPad_getPressedKey+0xc2>
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	20 f4       	brcc	.+8      	; 0x1296 <KeyPad_getPressedKey+0xaa>
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	49 f7       	brne	.-46     	; 0x1264 <KeyPad_getPressedKey+0x78>
    1292:	87 e0       	ldi	r24, 0x07	; 7
    1294:	08 95       	ret
    1296:	89 e0       	ldi	r24, 0x09	; 9
    1298:	08 95       	ret
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	08 95       	ret
    129e:	84 e0       	ldi	r24, 0x04	; 4
    12a0:	08 95       	ret
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	08 95       	ret
    12a6:	85 e0       	ldi	r24, 0x05	; 5
    12a8:	08 95       	ret
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	08 95       	ret
    12ae:	88 e0       	ldi	r24, 0x08	; 8
    12b0:	08 95       	ret
    12b2:	8d e2       	ldi	r24, 0x2D	; 45
    12b4:	08 95       	ret
    12b6:	8b e2       	ldi	r24, 0x2B	; 43
					#endif
				}
			}
		}
	}	
}
    12b8:	08 95       	ret

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
	switch(button_number)
    12ba:	8d e3       	ldi	r24, 0x3D	; 61
    12bc:	08 95       	ret
    12be:	8f e2       	ldi	r24, 0x2F	; 47
    12c0:	08 95       	ret
    12c2:	8a e2       	ldi	r24, 0x2A	; 42
    12c4:	08 95       	ret

000012c6 <LCD_displayCharacter>:
#endif
}


void LCD_displayCharacter(uint8 data)
{
    12c6:	1f 93       	push	r17
    12c8:	18 2f       	mov	r17, r24
	SET_BIT(LCD_CTRL_PORT_OUT,RS); /* Data Mode RS=1 */
    12ca:	ac 9a       	sbi	0x15, 4	; 21
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW); /* write data to LCD so RW=0 */
    12cc:	ad 98       	cbi	0x15, 5	; 21
	DELAY_ms(1); /* delay for processing Tas = 50ns */
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
	SET_BIT(LCD_CTRL_PORT_OUT,E); /* Enable LCD E=1 */
    12d6:	ae 9a       	sbi	0x15, 6	; 21
	DELAY_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
#if (LCD_DATA_BITS == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0xF0) | ((data & 0xF0) >> 4);
    12e0:	85 b3       	in	r24, 0x15	; 21
    12e2:	91 2f       	mov	r25, r17
    12e4:	92 95       	swap	r25
    12e6:	9f 70       	andi	r25, 0x0F	; 15
    12e8:	80 7f       	andi	r24, 0xF0	; 240
    12ea:	98 2b       	or	r25, r24
    12ec:	95 bb       	out	0x15, r25	; 21
#endif

	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
    12f6:	ae 98       	cbi	0x15, 6	; 21
	DELAY_ms(1); /* delay for processing Th = 13ns */
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
	SET_BIT(LCD_CTRL_PORT_OUT,E); /* Enable LCD E=1 */
    1300:	ae 9a       	sbi	0x15, 6	; 21
	DELAY_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0xF0) | (data & 0x0F);
    130a:	85 b3       	in	r24, 0x15	; 21
    130c:	1f 70       	andi	r17, 0x0F	; 15
    130e:	80 7f       	andi	r24, 0xF0	; 240
    1310:	81 2b       	or	r24, r17
    1312:	85 bb       	out	0x15, r24	; 21
#endif

	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
    131c:	ae 98       	cbi	0x15, 6	; 21
	DELAY_ms(1); /* delay for processing Th = 13ns */
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
	LCD_DATA_PORT_OUT = data; /* out the required data to the data bus D0 --> D7 */
	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
	DELAY_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1326:	1f 91       	pop	r17
    1328:	08 95       	ret

0000132a <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	ec 01       	movw	r28, r24
	while((*Str) != '\0')
    1330:	88 81       	ld	r24, Y
    1332:	88 23       	and	r24, r24
    1334:	31 f0       	breq	.+12     	; 0x1342 <LCD_displayString+0x18>
	{
		LCD_displayCharacter(*Str);
    1336:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_displayCharacter>
		Str++;
    133a:	21 96       	adiw	r28, 0x01	; 1
#endif
}

void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    133c:	88 81       	ld	r24, Y
    133e:	88 23       	and	r24, r24
    1340:	d1 f7       	brne	.-12     	; 0x1336 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <LCD_displayFloatNumber>:
	itoa(number,buff,10);
	LCD_displayString(buff);
#endif
}
void LCD_displayFloatNumber(float32 data,uint8 num_pre)
{
    1348:	6f 92       	push	r6
    134a:	7f 92       	push	r7
    134c:	8f 92       	push	r8
    134e:	9f 92       	push	r9
    1350:	af 92       	push	r10
    1352:	bf 92       	push	r11
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	5b 01       	movw	r10, r22
    1366:	6c 01       	movw	r12, r24
    1368:	f4 2e       	mov	r15, r20
	static uint8 str[11];   //max number entered to display on lcd
	uint8 *buff = &str[10], p_counter=num_pre ,negtive_flag=0;
	float32 pre; uint32 p=1;            /* String to hold the ascii result */
    *buff = '\0';
    136a:	10 92 d3 01 	sts	0x01D3, r1

    if (data<0){
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    137a:	87 fd       	sbrc	r24, 7
    137c:	90 c0       	rjmp	.+288    	; 0x149e <LCD_displayFloatNumber+0x156>
    137e:	ee 24       	eor	r14, r14
		negtive_flag=1;
		data=-data  ;
	}

    for(; p_counter>0; p_counter--){
    1380:	ff 20       	and	r15, r15
    1382:	09 f4       	brne	.+2      	; 0x1386 <LCD_displayFloatNumber+0x3e>
    1384:	b2 c0       	rjmp	.+356    	; 0x14ea <LCD_displayFloatNumber+0x1a2>
    1386:	1f 2d       	mov	r17, r15
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
		p*=10;
    1390:	2a e0       	ldi	r18, 0x0A	; 10
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__mulsi3>
    if (data<0){
		negtive_flag=1;
		data=-data  ;
	}

    for(; p_counter>0; p_counter--){
    139c:	11 50       	subi	r17, 0x01	; 1
    139e:	c1 f7       	brne	.-16     	; 0x1390 <LCD_displayFloatNumber+0x48>
    13a0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    13a4:	3b 01       	movw	r6, r22
    13a6:	4c 01       	movw	r8, r24
		p*=10;
    }
	pre=data-(int)data;
	pre*=p;

	if (data == 0){
    13a8:	c6 01       	movw	r24, r12
    13aa:	b5 01       	movw	r22, r10
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    13b8:	88 23       	and	r24, r24
    13ba:	09 f4       	brne	.+2      	; 0x13be <LCD_displayFloatNumber+0x76>
    13bc:	4a c0       	rjmp	.+148    	; 0x1452 <LCD_displayFloatNumber+0x10a>
	}

    for(; p_counter>0; p_counter--){
		p*=10;
    }
	pre=data-(int)data;
    13be:	c6 01       	movw	r24, r12
    13c0:	b5 01       	movw	r22, r10
    13c2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    13c6:	8b 01       	movw	r16, r22
    13c8:	b8 01       	movw	r22, r16
    13ca:	88 27       	eor	r24, r24
    13cc:	77 fd       	sbrc	r23, 7
    13ce:	80 95       	com	r24
    13d0:	98 2f       	mov	r25, r24
    13d2:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	c6 01       	movw	r24, r12
    13dc:	b5 01       	movw	r22, r10
    13de:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
		}
		*--buff = ',';
		*--buff = '0';
	}
	else {
		while((int)pre>0)
    13e2:	a4 01       	movw	r20, r8
    13e4:	93 01       	movw	r18, r6
    13e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ea:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    13ee:	9b 01       	movw	r18, r22
    13f0:	16 16       	cp	r1, r22
    13f2:	17 06       	cpc	r1, r23
    13f4:	0c f0       	brlt	.+2      	; 0x13f8 <LCD_displayFloatNumber+0xb0>
    13f6:	84 c0       	rjmp	.+264    	; 0x1500 <LCD_displayFloatNumber+0x1b8>
		while(num_pre>0){
			*--buff = '0';
			num_pre--;
		}
		*--buff = ',';
		*--buff = '0';
    13f8:	c3 ed       	ldi	r28, 0xD3	; 211
    13fa:	d1 e0       	ldi	r29, 0x01	; 1
	}
	else {
		while((int)pre>0)
		{
			*--buff = "0123456789"[(int)pre %10]; /* 10 for decimal */
    13fc:	c9 01       	movw	r24, r18
    13fe:	6a e0       	ldi	r22, 0x0A	; 10
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__divmodhi4>
    1406:	fc 01       	movw	r30, r24
    1408:	e0 5a       	subi	r30, 0xA0	; 160
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 81       	ld	r24, Z
    140e:	8a 93       	st	-Y, r24
			pre =(int)pre/10;
    1410:	c9 01       	movw	r24, r18
    1412:	6a e0       	ldi	r22, 0x0A	; 10
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__divmodhi4>
    141a:	88 27       	eor	r24, r24
    141c:	77 fd       	sbrc	r23, 7
    141e:	80 95       	com	r24
    1420:	98 2f       	mov	r25, r24
    1422:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
			num_pre--;
    1426:	fa 94       	dec	r15
		}
		*--buff = ',';
		*--buff = '0';
	}
	else {
		while((int)pre>0)
    1428:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    142c:	9b 01       	movw	r18, r22
    142e:	16 16       	cp	r1, r22
    1430:	17 06       	cpc	r1, r23
    1432:	24 f3       	brlt	.-56     	; 0x13fc <LCD_displayFloatNumber+0xb4>
    1434:	fe 01       	movw	r30, r28
		{
			*--buff = "0123456789"[(int)pre %10]; /* 10 for decimal */
			pre =(int)pre/10;
			num_pre--;
		}
		if(num_pre>0){
    1436:	ff 20       	and	r15, r15
    1438:	19 f0       	breq	.+6      	; 0x1440 <LCD_displayFloatNumber+0xf8>
			*--buff = '0';
    143a:	fe 01       	movw	r30, r28
    143c:	80 e3       	ldi	r24, 0x30	; 48
    143e:	82 93       	st	-Z, r24
			num_pre--;
		}
		*--buff = ',';
    1440:	ef 01       	movw	r28, r30
    1442:	8c e2       	ldi	r24, 0x2C	; 44
    1444:	8a 93       	st	-Y, r24
		if((int)data==0)
    1446:	01 15       	cp	r16, r1
    1448:	11 05       	cpc	r17, r1
    144a:	81 f5       	brne	.+96     	; 0x14ac <LCD_displayFloatNumber+0x164>
			*--buff = '0';
    144c:	80 e3       	ldi	r24, 0x30	; 48
    144e:	8a 93       	st	-Y, r24
    1450:	10 c0       	rjmp	.+32     	; 0x1472 <LCD_displayFloatNumber+0x12a>
    }
	pre=data-(int)data;
	pre*=p;

	if (data == 0){
		while(num_pre>0){
    1452:	ff 20       	and	r15, r15
    1454:	09 f4       	brne	.+2      	; 0x1458 <LCD_displayFloatNumber+0x110>
    1456:	58 c0       	rjmp	.+176    	; 0x1508 <LCD_displayFloatNumber+0x1c0>
    1458:	e3 ed       	ldi	r30, 0xD3	; 211
    145a:	f1 e0       	ldi	r31, 0x01	; 1
			*--buff = '0';
    145c:	80 e3       	ldi	r24, 0x30	; 48
    145e:	82 93       	st	-Z, r24
			num_pre--;
    1460:	fa 94       	dec	r15
    }
	pre=data-(int)data;
	pre*=p;

	if (data == 0){
		while(num_pre>0){
    1462:	e9 f7       	brne	.-6      	; 0x145e <LCD_displayFloatNumber+0x116>
    1464:	31 97       	sbiw	r30, 0x01	; 1
    1466:	ef 01       	movw	r28, r30
    1468:	21 97       	sbiw	r28, 0x01	; 1
			*--buff = '0';
			num_pre--;
		}
		*--buff = ',';
    146a:	8c e2       	ldi	r24, 0x2C	; 44
    146c:	80 83       	st	Z, r24
		*--buff = '0';
    146e:	80 e3       	ldi	r24, 0x30	; 48
    1470:	88 83       	st	Y, r24
			*--buff = "0123456789"[(int)data %10]; /* 10 for decimal */
			data =(int)data/10;
		}
	}

	if(negtive_flag){
    1472:	ee 20       	and	r14, r14
    1474:	11 f0       	breq	.+4      	; 0x147a <LCD_displayFloatNumber+0x132>
		negtive_flag=0;
		*--buff = '-';
    1476:	8d e2       	ldi	r24, 0x2D	; 45
    1478:	8a 93       	st	-Y, r24
	}
	LCD_displayString(buff);
    147a:	ce 01       	movw	r24, r28
    147c:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_displayString>
}
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	ff 90       	pop	r15
    148a:	ef 90       	pop	r14
    148c:	df 90       	pop	r13
    148e:	cf 90       	pop	r12
    1490:	bf 90       	pop	r11
    1492:	af 90       	pop	r10
    1494:	9f 90       	pop	r9
    1496:	8f 90       	pop	r8
    1498:	7f 90       	pop	r7
    149a:	6f 90       	pop	r6
    149c:	08 95       	ret
	float32 pre; uint32 p=1;            /* String to hold the ascii result */
    *buff = '\0';

    if (data<0){
		negtive_flag=1;
		data=-data  ;
    149e:	d7 fa       	bst	r13, 7
    14a0:	d0 94       	com	r13
    14a2:	d7 f8       	bld	r13, 7
    14a4:	d0 94       	com	r13
    14a6:	ee 24       	eor	r14, r14
    14a8:	e3 94       	inc	r14
    14aa:	6a cf       	rjmp	.-300    	; 0x1380 <LCD_displayFloatNumber+0x38>
			num_pre--;
		}
		*--buff = ',';
		if((int)data==0)
			*--buff = '0';
		while((int)data>0)
    14ac:	10 16       	cp	r1, r16
    14ae:	11 06       	cpc	r1, r17
    14b0:	04 f7       	brge	.-64     	; 0x1472 <LCD_displayFloatNumber+0x12a>
		{
			*--buff = "0123456789"[(int)data %10]; /* 10 for decimal */
    14b2:	c8 01       	movw	r24, r16
    14b4:	6a e0       	ldi	r22, 0x0A	; 10
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__divmodhi4>
    14bc:	fc 01       	movw	r30, r24
    14be:	e0 5a       	subi	r30, 0xA0	; 160
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	80 81       	ld	r24, Z
    14c4:	8a 93       	st	-Y, r24
			data =(int)data/10;
    14c6:	c8 01       	movw	r24, r16
    14c8:	6a e0       	ldi	r22, 0x0A	; 10
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__divmodhi4>
    14d0:	88 27       	eor	r24, r24
    14d2:	77 fd       	sbrc	r23, 7
    14d4:	80 95       	com	r24
    14d6:	98 2f       	mov	r25, r24
    14d8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
			num_pre--;
		}
		*--buff = ',';
		if((int)data==0)
			*--buff = '0';
		while((int)data>0)
    14dc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    14e0:	8b 01       	movw	r16, r22
    14e2:	16 16       	cp	r1, r22
    14e4:	17 06       	cpc	r1, r23
    14e6:	2c f3       	brlt	.-54     	; 0x14b2 <LCD_displayFloatNumber+0x16a>
    14e8:	c4 cf       	rjmp	.-120    	; 0x1472 <LCD_displayFloatNumber+0x12a>
    if (data<0){
		negtive_flag=1;
		data=-data  ;
	}

    for(; p_counter>0; p_counter--){
    14ea:	0f 2e       	mov	r0, r31
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	6f 2e       	mov	r6, r31
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	7f 2e       	mov	r7, r31
    14f4:	f0 e8       	ldi	r31, 0x80	; 128
    14f6:	8f 2e       	mov	r8, r31
    14f8:	ff e3       	ldi	r31, 0x3F	; 63
    14fa:	9f 2e       	mov	r9, r31
    14fc:	f0 2d       	mov	r31, r0
    14fe:	54 cf       	rjmp	.-344    	; 0x13a8 <LCD_displayFloatNumber+0x60>
		}
		*--buff = ',';
		*--buff = '0';
	}
	else {
		while((int)pre>0)
    1500:	c3 ed       	ldi	r28, 0xD3	; 211
    1502:	d1 e0       	ldi	r29, 0x01	; 1
    1504:	fe 01       	movw	r30, r28
    1506:	97 cf       	rjmp	.-210    	; 0x1436 <LCD_displayFloatNumber+0xee>
    }
	pre=data-(int)data;
	pre*=p;

	if (data == 0){
		while(num_pre>0){
    1508:	e2 ed       	ldi	r30, 0xD2	; 210
    150a:	f1 e0       	ldi	r31, 0x01	; 1
    150c:	ef 01       	movw	r28, r30
    150e:	21 97       	sbiw	r28, 0x01	; 1
    1510:	ac cf       	rjmp	.-168    	; 0x146a <LCD_displayFloatNumber+0x122>

00001512 <LCD_displayNumber>:
	//		row=1;
	//
}

void LCD_displayNumber(sint32 number) /* max number is size of uint: 4294967295 */
{
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	7b 01       	movw	r14, r22
    1522:	8c 01       	movw	r16, r24
	static char str[11];       //max number entered to display on lcd
	char *buff = &str[10];     /* String to hold the ascii result */
	uint8 negtive_flag = 0 ;
	if (number<0){
    1524:	97 fd       	sbrc	r25, 7
    1526:	18 c0       	rjmp	.+48     	; 0x1558 <LCD_displayNumber+0x46>
		negtive_flag=1  ;
		number = -number ;
	}
	*buff = '\0';
    1528:	10 92 de 01 	sts	0x01DE, r1
	if (number == 0){
    152c:	61 15       	cp	r22, r1
    152e:	71 05       	cpc	r23, r1
    1530:	81 05       	cpc	r24, r1
    1532:	91 05       	cpc	r25, r1
    1534:	09 f0       	breq	.+2      	; 0x1538 <LCD_displayNumber+0x26>
    1536:	43 c0       	rjmp	.+134    	; 0x15be <LCD_displayNumber+0xac>
		*--buff = '0';
    1538:	80 e3       	ldi	r24, 0x30	; 48
    153a:	80 93 dd 01 	sts	0x01DD, r24
    153e:	cd ed       	ldi	r28, 0xDD	; 221
    1540:	d1 e0       	ldi	r29, 0x01	; 1
	}
	if(negtive_flag){
		negtive_flag=0;
		*--buff = '-' ;
	}
	LCD_displayString(buff);
    1542:	ce 01       	movw	r24, r28
    1544:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_displayString>
	/*another solution*/
	char buff[11];
	itoa(number,buff,10);
	LCD_displayString(buff);
#endif
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	08 95       	ret
	static char str[11];       //max number entered to display on lcd
	char *buff = &str[10];     /* String to hold the ascii result */
	uint8 negtive_flag = 0 ;
	if (number<0){
		negtive_flag=1  ;
		number = -number ;
    1558:	10 95       	com	r17
    155a:	00 95       	com	r16
    155c:	f0 94       	com	r15
    155e:	e0 94       	com	r14
    1560:	e1 1c       	adc	r14, r1
    1562:	f1 1c       	adc	r15, r1
    1564:	01 1d       	adc	r16, r1
    1566:	11 1d       	adc	r17, r1
	}
	*buff = '\0';
    1568:	10 92 de 01 	sts	0x01DE, r1
    156c:	dd 24       	eor	r13, r13
    156e:	d3 94       	inc	r13
	if (number == 0){
    1570:	ce ed       	ldi	r28, 0xDE	; 222
    1572:	d1 e0       	ldi	r29, 0x01	; 1
		*--buff = '0';
	}
	else {
		while(number>0)
		{
			*--buff = "0123456789"[number %10]; /* 10 for decimal */
    1574:	c8 01       	movw	r24, r16
    1576:	b7 01       	movw	r22, r14
    1578:	2a e0       	ldi	r18, 0x0A	; 10
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__divmodsi4>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	80 5a       	subi	r24, 0xA0	; 160
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	fc 01       	movw	r30, r24
    158e:	80 81       	ld	r24, Z
    1590:	8a 93       	st	-Y, r24
			number /=10;
    1592:	c8 01       	movw	r24, r16
    1594:	b7 01       	movw	r22, r14
    1596:	2a e0       	ldi	r18, 0x0A	; 10
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__divmodsi4>
    15a2:	c9 01       	movw	r24, r18
    15a4:	da 01       	movw	r26, r20
    15a6:	7c 01       	movw	r14, r24
    15a8:	8d 01       	movw	r16, r26
	*buff = '\0';
	if (number == 0){
		*--buff = '0';
	}
	else {
		while(number>0)
    15aa:	e1 14       	cp	r14, r1
    15ac:	f1 04       	cpc	r15, r1
    15ae:	01 05       	cpc	r16, r1
    15b0:	11 05       	cpc	r17, r1
    15b2:	01 f7       	brne	.-64     	; 0x1574 <LCD_displayNumber+0x62>
		{
			*--buff = "0123456789"[number %10]; /* 10 for decimal */
			number /=10;
		}
	}
	if(negtive_flag){
    15b4:	dd 20       	and	r13, r13
    15b6:	29 f2       	breq	.-118    	; 0x1542 <LCD_displayNumber+0x30>
		negtive_flag=0;
		*--buff = '-' ;
    15b8:	8d e2       	ldi	r24, 0x2D	; 45
    15ba:	8a 93       	st	-Y, r24
    15bc:	c2 cf       	rjmp	.-124    	; 0x1542 <LCD_displayNumber+0x30>
	if (number<0){
		negtive_flag=1  ;
		number = -number ;
	}
	*buff = '\0';
	if (number == 0){
    15be:	dd 24       	eor	r13, r13
    15c0:	d7 cf       	rjmp	.-82     	; 0x1570 <LCD_displayNumber+0x5e>

000015c2 <LCD_sendCommand>:
	LCD_sendCommand(LCD_CURSOR_OFF);   /* cursor off */
	LCD_sendCommand(LCD_CLEAR_SCREEN); /* clear LCD at the beginning */
}

void LCD_sendCommand(uint8 command)
{
    15c2:	1f 93       	push	r17
    15c4:	18 2f       	mov	r17, r24
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RS); /* Instruction Mode RS=0 */
    15c6:	ac 98       	cbi	0x15, 4	; 21
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW); /* write data to LCD so RW=0 */
    15c8:	ad 98       	cbi	0x15, 5	; 21
	DELAY_ms(1); /* delay for processing Tas = 50ns */
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
	SET_BIT(LCD_CTRL_PORT_OUT,E); /* Enable LCD E=1 */
    15d2:	ae 9a       	sbi	0x15, 6	; 21
	DELAY_ms(1); /* delay for processing Tpw - Tdsw = 190ns */
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
#if (LCD_DATA_BITS == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0xF0) | ((command & 0xF0) >> 4);
    15dc:	85 b3       	in	r24, 0x15	; 21
    15de:	91 2f       	mov	r25, r17
    15e0:	92 95       	swap	r25
    15e2:	9f 70       	andi	r25, 0x0F	; 15
    15e4:	80 7f       	andi	r24, 0xF0	; 240
    15e6:	98 2b       	or	r25, r24
    15e8:	95 bb       	out	0x15, r25	; 21
#endif

	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
    15f2:	ae 98       	cbi	0x15, 6	; 21
	DELAY_ms(1); /* delay for processing Th = 13ns */
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
	SET_BIT(LCD_CTRL_PORT_OUT,E); /* Enable LCD E=1 */
    15fc:	ae 9a       	sbi	0x15, 6	; 21
	DELAY_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0xF0) | (command & 0x0F);
    1606:	85 b3       	in	r24, 0x15	; 21
    1608:	1f 70       	andi	r17, 0x0F	; 15
    160a:	80 7f       	andi	r24, 0xF0	; 240
    160c:	81 2b       	or	r24, r17
    160e:	85 bb       	out	0x15, r24	; 21
#endif

	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
    1618:	ae 98       	cbi	0x15, 6	; 21
	DELAY_ms(1); /* delay for processing Th = 13ns */
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
	LCD_DATA_PORT_OUT = command ;  /* out the required command to the data bus D0 --> D7 */
	DELAY_ms(1);                 /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
	DELAY_ms(1);                 /* delay for processing Th = 13ns */
#endif
}
    1622:	1f 91       	pop	r17
    1624:	08 95       	ret

00001626 <LCD_clearScreen>:
}


void LCD_clearScreen(void)            /*not important */
{
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_sendCommand>
}
    162c:	08 95       	ret

0000162e <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	b9 f0       	breq	.+46     	; 0x1660 <LCD_goToRowColumn+0x32>
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	20 f0       	brcs	.+8      	; 0x163e <LCD_goToRowColumn+0x10>
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	69 f0       	breq	.+26     	; 0x1654 <LCD_goToRowColumn+0x26>
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	29 f0       	breq	.+10     	; 0x1648 <LCD_goToRowColumn+0x1a>
		Address=col+0x50;
		break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    163e:	86 2f       	mov	r24, r22
    1640:	80 68       	ori	r24, 0x80	; 128
    1642:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_sendCommand>
}
    1646:	08 95       	ret
		break;
	case 2:
		Address=col+0x10;
		break;
	case 3:
		Address=col+0x50;
    1648:	60 5b       	subi	r22, 0xB0	; 176
		break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    164a:	86 2f       	mov	r24, r22
    164c:	80 68       	ori	r24, 0x80	; 128
    164e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_sendCommand>
}
    1652:	08 95       	ret
		break;
	case 1:
		Address=col+0x40;
		break;
	case 2:
		Address=col+0x10;
    1654:	60 5f       	subi	r22, 0xF0	; 240
		Address=col+0x50;
		break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1656:	86 2f       	mov	r24, r22
    1658:	80 68       	ori	r24, 0x80	; 128
    165a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_sendCommand>
}
    165e:	08 95       	ret
	{
	case 0:
		Address=col;
		break;
	case 1:
		Address=col+0x40;
    1660:	60 5c       	subi	r22, 0xC0	; 192
		Address=col+0x50;
		break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1662:	86 2f       	mov	r24, r22
    1664:	80 68       	ori	r24, 0x80	; 128
    1666:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_sendCommand>
}
    166a:	08 95       	ret

0000166c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	8a 01       	movw	r16, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1672:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1676:	c8 01       	movw	r24, r16
    1678:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_displayString>
	//		}
	//	col++;
	//	if (col==15)
	//		row=1;
	//
}
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	08 95       	ret

00001682 <LCD_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1682:	84 b3       	in	r24, 0x14	; 20
    1684:	80 67       	ori	r24, 0x70	; 112
    1686:	84 bb       	out	0x14, r24	; 20

#if (LCD_DATA_BITS == 4)
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
#else
	LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    1688:	84 b3       	in	r24, 0x14	; 20
    168a:	8f 60       	ori	r24, 0x0F	; 15
    168c:	84 bb       	out	0x14, r24	; 20
#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE);        /* initialize LCD in 4-bit mode */
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1694:	88 e2       	ldi	r24, 0x28	; 40
    1696:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_sendCommand>
#elif (LCD_DATA_BITS == 8)
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);   /* cursor off */
    169a:	8c e0       	ldi	r24, 0x0C	; 12
    169c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN); /* clear LCD at the beginning */
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_sendCommand>
}
    16a6:	08 95       	ret

000016a8 <main>:
unsigned char count =0, i=0 ;
unsigned char letter=0;

int main(void){

	LCD_init();
    16a8:	0e 94 41 0b 	call	0x1682	; 0x1682 <LCD_init>
	switch_init();
    16ac:	0e 94 28 0c 	call	0x1850	; 0x1850 <switch_init>
	servo_init(124);
    16b0:	8c e7       	ldi	r24, 0x7C	; 124
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <servo_init>
	DELAY_init();
    16b8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DELAY_init>

	while(1){

		SREG&=~(1<<7);       //to save me from interrupts
    16bc:	8f b7       	in	r24, 0x3f	; 63
    16be:	8f 77       	andi	r24, 0x7F	; 127
    16c0:	8f bf       	out	0x3f, r24	; 63
		servo_move(124);
    16c2:	8c e7       	ldi	r24, 0x7C	; 124
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <servo_move>
		LCD_clearScreen();
    16ca:	0e 94 13 0b 	call	0x1626	; 0x1626 <LCD_clearScreen>
		LCD_displayString("  Enter Password    ");
    16ce:	8b e6       	ldi	r24, 0x6B	; 107
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_displayString>
		LCD_goToRowColumn(2,2);
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	62 e0       	ldi	r22, 0x02	; 2
    16da:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_goToRowColumn>

		for (count=0 ; count < 5 ; count ++){
    16de:	10 92 df 01 	sts	0x01DF, r1
			letter= KeyPad_getPressedKey();
    16e2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <KeyPad_getPressedKey>
    16e6:	80 93 e1 01 	sts	0x01E1, r24
			input_pass[count]=letter;
    16ea:	e0 91 df 01 	lds	r30, 0x01DF
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	ee 51       	subi	r30, 0x1E	; 30
    16f2:	fe 4f       	sbci	r31, 0xFE	; 254
    16f4:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    16f6:	8a e2       	ldi	r24, 0x2A	; 42
    16f8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_displayCharacter>
			DELAY_ms(400);
    16fc:	80 e9       	ldi	r24, 0x90	; 144
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
		servo_move(124);
		LCD_clearScreen();
		LCD_displayString("  Enter Password    ");
		LCD_goToRowColumn(2,2);

		for (count=0 ; count < 5 ; count ++){
    1704:	80 91 df 01 	lds	r24, 0x01DF
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	80 93 df 01 	sts	0x01DF, r24
    170e:	85 30       	cpi	r24, 0x05	; 5
    1710:	40 f3       	brcs	.-48     	; 0x16e2 <main+0x3a>
			input_pass[count]=letter;
			LCD_displayCharacter('*');
			DELAY_ms(400);
		}

		for(i=0;i<5;i++){
    1712:	10 92 e0 01 	sts	0x01E0, r1
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <main+0x7a>
    1720:	54 2f       	mov	r21, r20
			if(memory_pass[i]!=input_pass[i])
    1722:	f9 01       	movw	r30, r18
    1724:	e3 54       	subi	r30, 0x43	; 67
    1726:	fe 4f       	sbci	r31, 0xFE	; 254
    1728:	90 81       	ld	r25, Z
    172a:	f9 01       	movw	r30, r18
    172c:	ee 51       	subi	r30, 0x1E	; 30
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	80 81       	ld	r24, Z
    1732:	98 17       	cp	r25, r24
    1734:	f1 f4       	brne	.+60     	; 0x1772 <main+0xca>
			input_pass[count]=letter;
			LCD_displayCharacter('*');
			DELAY_ms(400);
		}

		for(i=0;i<5;i++){
    1736:	45 2f       	mov	r20, r21
    1738:	4f 5f       	subi	r20, 0xFF	; 255
    173a:	2f 5f       	subi	r18, 0xFF	; 255
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	45 30       	cpi	r20, 0x05	; 5
    1740:	79 f7       	brne	.-34     	; 0x1720 <main+0x78>
    1742:	40 93 e0 01 	sts	0x01E0, r20
			if(memory_pass[i]!=input_pass[i])
				break;
		}
		if(i==5){
			LCD_clearScreen();
    1746:	0e 94 13 0b 	call	0x1626	; 0x1626 <LCD_clearScreen>
			LCD_goToRowColumn(2,1);
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_goToRowColumn>
			LCD_displayString("  Welcome  ");
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_displayString>
			servo_move(187);
    175a:	8b eb       	ldi	r24, 0xBB	; 187
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <servo_move>
			DELAY_ms(1000);
    1762:	88 ee       	ldi	r24, 0xE8	; 232
    1764:	93 e0       	ldi	r25, 0x03	; 3
    1766:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
			LCD_goToRowColumn(2,1);
			LCD_displayString(" Amo 7ramy ");
			DELAY_ms(1000);
		}//i!=5

		SREG|=(1<<7);   //enable it again 
    176a:	8f b7       	in	r24, 0x3f	; 63
    176c:	80 68       	ori	r24, 0x80	; 128
    176e:	8f bf       	out	0x3f, r24	; 63
    1770:	a5 cf       	rjmp	.-182    	; 0x16bc <main+0x14>
		if(i==5){
			LCD_clearScreen();
			LCD_goToRowColumn(2,1);
			LCD_displayString("  Welcome  ");
			servo_move(187);
			DELAY_ms(1000);
    1772:	40 93 e0 01 	sts	0x01E0, r20
		}//i

		else if(i!=5){    //the password not matched
    1776:	55 30       	cpi	r21, 0x05	; 5
    1778:	c1 f3       	breq	.-16     	; 0x176a <main+0xc2>
			LCD_clearScreen();
    177a:	0e 94 13 0b 	call	0x1626	; 0x1626 <LCD_clearScreen>
			LCD_goToRowColumn(2,1);
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_goToRowColumn>
			LCD_displayString(" Amo 7ramy ");
    1786:	8c e8       	ldi	r24, 0x8C	; 140
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_displayString>
			DELAY_ms(1000);
    178e:	88 ee       	ldi	r24, 0xE8	; 232
    1790:	93 e0       	ldi	r25, 0x03	; 3
    1792:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
    1796:	e9 cf       	rjmp	.-46     	; 0x176a <main+0xc2>

00001798 <stepper_motor_init>:
unsigned char motor_full_steps [FULL_WAVE_STEPS] = {12,6,3,9};
unsigned char motor_half_steps [HALF_WAVE_STEPS] = {8,12,4,6,2,3,1,9};

void stepper_motor_init(void)
{
 data_port_dir = 0x0F;
    1798:	8f e0       	ldi	r24, 0x0F	; 15
    179a:	84 bb       	out	0x14, r24	; 20
 data_port     &= 0xF0;
    179c:	85 b3       	in	r24, 0x15	; 21
    179e:	80 7f       	andi	r24, 0xF0	; 240
    17a0:	85 bb       	out	0x15, r24	; 21
}
    17a2:	08 95       	ret

000017a4 <servo_move>:

}

void servo_move(uint16 duty_cycle)
{
	 Timer1_Fast_PWM_n_invert_speed(duty_cycle);
    17a4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Timer1_Fast_PWM_n_invert_speed>
}
    17a8:	08 95       	ret

000017aa <servo_init>:
 data_port_dir = 0x0F;
 data_port     &= 0xF0;
}

void servo_init(uint16 duty_cycle)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <servo_init+0x6>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <servo_init+0x8>
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
/////
	TIMER_ConfigType TIMER1_pwm ={TIMER1_Fast_PWM, F_CPU_64,duty_cycle };
    17b6:	2a e0       	ldi	r18, 0x0A	; 10
    17b8:	29 83       	std	Y+1, r18	; 0x01
    17ba:	23 e0       	ldi	r18, 0x03	; 3
    17bc:	2a 83       	std	Y+2, r18	; 0x02
    17be:	9c 83       	std	Y+4, r25	; 0x04
    17c0:	8b 83       	std	Y+3, r24	; 0x03
	TIMER1_init(&TIMER1_pwm);
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TIMER1_init>

}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <callBackint>:
	INT0_CallBack(callBackint);
	INT0_Init(&interrupt0) ;     //run in falling edge

}

void callBackint(void){
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
	LCD_clearScreen();
    17dc:	0e 94 13 0b 	call	0x1626	; 0x1626 <LCD_clearScreen>
	LCD_displayString("enter new Pass :");
    17e0:	88 e9       	ldi	r24, 0x98	; 152
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_displayString>
	LCD_goToRowColumn(2 , 1);
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	61 e0       	ldi	r22, 0x01	; 1
    17ec:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_goToRowColumn>

	for (count=0 ; count < 5 ; count ++){
    17f0:	10 92 df 01 	sts	0x01DF, r1
    17f4:	80 91 df 01 	lds	r24, 0x01DF
    17f8:	85 30       	cpi	r24, 0x05	; 5
    17fa:	f8 f4       	brcc	.+62     	; 0x183a <callBackint+0x62>
		memory_pass[count]= KeyPad_getPressedKey();
    17fc:	80 91 df 01 	lds	r24, 0x01DF
    1800:	c8 2f       	mov	r28, r24
    1802:	d0 e0       	ldi	r29, 0x00	; 0
    1804:	0e 94 f6 08 	call	0x11ec	; 0x11ec <KeyPad_getPressedKey>
    1808:	c3 54       	subi	r28, 0x43	; 67
    180a:	de 4f       	sbci	r29, 0xFE	; 254
    180c:	88 83       	st	Y, r24
		LCD_displayCharacter(memory_pass[count]+48);
    180e:	e0 91 df 01 	lds	r30, 0x01DF
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	e3 54       	subi	r30, 0x43	; 67
    1816:	fe 4f       	sbci	r31, 0xFE	; 254
    1818:	80 81       	ld	r24, Z
    181a:	80 5d       	subi	r24, 0xD0	; 208
    181c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_displayCharacter>
		DELAY_ms(400);
    1820:	80 e9       	ldi	r24, 0x90	; 144
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 ab 07 	call	0xf56	; 0xf56 <DELAY_ms>
void callBackint(void){
	LCD_clearScreen();
	LCD_displayString("enter new Pass :");
	LCD_goToRowColumn(2 , 1);

	for (count=0 ; count < 5 ; count ++){
    1828:	80 91 df 01 	lds	r24, 0x01DF
    182c:	8f 5f       	subi	r24, 0xFF	; 255
    182e:	80 93 df 01 	sts	0x01DF, r24
    1832:	80 91 df 01 	lds	r24, 0x01DF
    1836:	85 30       	cpi	r24, 0x05	; 5
    1838:	08 f3       	brcs	.-62     	; 0x17fc <callBackint+0x24>
		memory_pass[count]= KeyPad_getPressedKey();
		LCD_displayCharacter(memory_pass[count]+48);
		DELAY_ms(400);
	}
	IN_EEPROM_WriteBytes (0X0A, memory_pass, 5);
    183a:	8a e0       	ldi	r24, 0x0A	; 10
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	6d eb       	ldi	r22, 0xBD	; 189
    1840:	71 e0       	ldi	r23, 0x01	; 1
    1842:	45 e0       	ldi	r20, 0x05	; 5
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <IN_EEPROM_WriteBytes>
}
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	08 95       	ret

00001850 <switch_init>:
volatile uint8 memory_pass[5]= {1,1,1,1,1};
uint8  input_pass[5] = {0};
volatile uint8 switch1_press, switch2_press ,g_flag=0 ,count;

void switch_init()
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <switch_init+0x6>
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	sei();
    185a:	78 94       	sei

	if(IN_EEPROM_ReadByte (0)!=1){   //1 for check //first time
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <IN_EEPROM_ReadByte>
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f9 f0       	breq	.+62     	; 0x18a6 <switch_init+0x56>
		IN_EEPROM_WriteByte(0,1);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	61 e0       	ldi	r22, 0x01	; 1
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	0e 94 cf 07 	call	0xf9e	; 0xf9e <IN_EEPROM_WriteByte>
		IN_EEPROM_WriteBytes (0X0A, memory_pass, 5);
    1874:	8a e0       	ldi	r24, 0x0A	; 10
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	6d eb       	ldi	r22, 0xBD	; 189
    187a:	71 e0       	ldi	r23, 0x01	; 1
    187c:	45 e0       	ldi	r20, 0x05	; 5
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <IN_EEPROM_WriteBytes>
	else if(IN_EEPROM_ReadByte (0)==1){   //another times
		IN_EEPROM_ReadBytes (0X0A, memory_pass, 5);
	}
//	IN_EEPROM_ReadBytes  (0X0A, j , 2) ;

	INTERRUPT_Config interrupt0 ={FALLING_EDGE ,PULL_UP };
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	8a 83       	std	Y+2, r24	; 0x02
	INT0_CallBack(callBackint);
    188c:	8c ee       	ldi	r24, 0xEC	; 236
    188e:	9b e0       	ldi	r25, 0x0B	; 11
    1890:	0e 94 2e 08 	call	0x105c	; 0x105c <INT0_CallBack>
	INT0_Init(&interrupt0) ;     //run in falling edge
    1894:	ce 01       	movw	r24, r28
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	0e 94 1c 08 	call	0x1038	; 0x1038 <INT0_Init>

}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

	if(IN_EEPROM_ReadByte (0)!=1){   //1 for check //first time
		IN_EEPROM_WriteByte(0,1);
		IN_EEPROM_WriteBytes (0X0A, memory_pass, 5);
	}
	else if(IN_EEPROM_ReadByte (0)==1){   //another times
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <IN_EEPROM_ReadByte>
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	49 f7       	brne	.-46     	; 0x1884 <switch_init+0x34>
		IN_EEPROM_ReadBytes (0X0A, memory_pass, 5);
    18b2:	8a e0       	ldi	r24, 0x0A	; 10
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	6d eb       	ldi	r22, 0xBD	; 189
    18b8:	71 e0       	ldi	r23, 0x01	; 1
    18ba:	45 e0       	ldi	r20, 0x05	; 5
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	0e 94 f9 07 	call	0xff2	; 0xff2 <IN_EEPROM_ReadBytes>
    18c2:	e0 cf       	rjmp	.-64     	; 0x1884 <switch_init+0x34>

000018c4 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	11 24       	eor	r1, r1
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
	if(g_TIMER0_callBackPtr != NULL)
    18e6:	e0 91 ea 01 	lds	r30, 0x01EA
    18ea:	f0 91 eb 01 	lds	r31, 0x01EB
    18ee:	30 97       	sbiw	r30, 0x00	; 0
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <__vector_9+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    18f2:	09 95       	icall
	}
}
    18f4:	ff 91       	pop	r31
    18f6:	ef 91       	pop	r30
    18f8:	bf 91       	pop	r27
    18fa:	af 91       	pop	r26
    18fc:	9f 91       	pop	r25
    18fe:	8f 91       	pop	r24
    1900:	7f 91       	pop	r23
    1902:	6f 91       	pop	r22
    1904:	5f 91       	pop	r21
    1906:	4f 91       	pop	r20
    1908:	3f 91       	pop	r19
    190a:	2f 91       	pop	r18
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    1916:	1f 92       	push	r1
    1918:	0f 92       	push	r0
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	0f 92       	push	r0
    191e:	11 24       	eor	r1, r1
    1920:	2f 93       	push	r18
    1922:	3f 93       	push	r19
    1924:	4f 93       	push	r20
    1926:	5f 93       	push	r21
    1928:	6f 93       	push	r22
    192a:	7f 93       	push	r23
    192c:	8f 93       	push	r24
    192e:	9f 93       	push	r25
    1930:	af 93       	push	r26
    1932:	bf 93       	push	r27
    1934:	ef 93       	push	r30
    1936:	ff 93       	push	r31
	if(g_TIMER0_callBackPtr != NULL)
    1938:	e0 91 ea 01 	lds	r30, 0x01EA
    193c:	f0 91 eb 01 	lds	r31, 0x01EB
    1940:	30 97       	sbiw	r30, 0x00	; 0
    1942:	09 f0       	breq	.+2      	; 0x1946 <__vector_19+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    1944:	09 95       	icall
	}
}
    1946:	ff 91       	pop	r31
    1948:	ef 91       	pop	r30
    194a:	bf 91       	pop	r27
    194c:	af 91       	pop	r26
    194e:	9f 91       	pop	r25
    1950:	8f 91       	pop	r24
    1952:	7f 91       	pop	r23
    1954:	6f 91       	pop	r22
    1956:	5f 91       	pop	r21
    1958:	4f 91       	pop	r20
    195a:	3f 91       	pop	r19
    195c:	2f 91       	pop	r18
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	0f 90       	pop	r0
    1964:	1f 90       	pop	r1
    1966:	18 95       	reti

00001968 <__vector_6>:
///////////////////////////////////
ISR(TIMER1_COMPA_vect)
{
    1968:	1f 92       	push	r1
    196a:	0f 92       	push	r0
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	0f 92       	push	r0
    1970:	11 24       	eor	r1, r1
    1972:	2f 93       	push	r18
    1974:	3f 93       	push	r19
    1976:	4f 93       	push	r20
    1978:	5f 93       	push	r21
    197a:	6f 93       	push	r22
    197c:	7f 93       	push	r23
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25
    1982:	af 93       	push	r26
    1984:	bf 93       	push	r27
    1986:	ef 93       	push	r30
    1988:	ff 93       	push	r31
	if(g_TIMER1_callBackPtr != NULL)
    198a:	e0 91 e8 01 	lds	r30, 0x01E8
    198e:	f0 91 e9 01 	lds	r31, 0x01E9
    1992:	30 97       	sbiw	r30, 0x00	; 0
    1994:	09 f0       	breq	.+2      	; 0x1998 <__vector_6+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1996:	09 95       	icall
	}
}
    1998:	ff 91       	pop	r31
    199a:	ef 91       	pop	r30
    199c:	bf 91       	pop	r27
    199e:	af 91       	pop	r26
    19a0:	9f 91       	pop	r25
    19a2:	8f 91       	pop	r24
    19a4:	7f 91       	pop	r23
    19a6:	6f 91       	pop	r22
    19a8:	5f 91       	pop	r21
    19aa:	4f 91       	pop	r20
    19ac:	3f 91       	pop	r19
    19ae:	2f 91       	pop	r18
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	0f 90       	pop	r0
    19b6:	1f 90       	pop	r1
    19b8:	18 95       	reti

000019ba <__vector_5>:
ISR(TIMER1_CAPT_vect)
{
    19ba:	1f 92       	push	r1
    19bc:	0f 92       	push	r0
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	0f 92       	push	r0
    19c2:	11 24       	eor	r1, r1
    19c4:	2f 93       	push	r18
    19c6:	3f 93       	push	r19
    19c8:	4f 93       	push	r20
    19ca:	5f 93       	push	r21
    19cc:	6f 93       	push	r22
    19ce:	7f 93       	push	r23
    19d0:	8f 93       	push	r24
    19d2:	9f 93       	push	r25
    19d4:	af 93       	push	r26
    19d6:	bf 93       	push	r27
    19d8:	ef 93       	push	r30
    19da:	ff 93       	push	r31
	if(g_TIMER1_callBackPtr != NULL)
    19dc:	e0 91 e8 01 	lds	r30, 0x01E8
    19e0:	f0 91 e9 01 	lds	r31, 0x01E9
    19e4:	30 97       	sbiw	r30, 0x00	; 0
    19e6:	09 f0       	breq	.+2      	; 0x19ea <__vector_5+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    19e8:	09 95       	icall
	}
}
    19ea:	ff 91       	pop	r31
    19ec:	ef 91       	pop	r30
    19ee:	bf 91       	pop	r27
    19f0:	af 91       	pop	r26
    19f2:	9f 91       	pop	r25
    19f4:	8f 91       	pop	r24
    19f6:	7f 91       	pop	r23
    19f8:	6f 91       	pop	r22
    19fa:	5f 91       	pop	r21
    19fc:	4f 91       	pop	r20
    19fe:	3f 91       	pop	r19
    1a00:	2f 91       	pop	r18
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	0f 90       	pop	r0
    1a08:	1f 90       	pop	r1
    1a0a:	18 95       	reti

00001a0c <TIMER0_init>:
 * 	1. Set the timer type.
 * 	2. Set the required clock.
 * 	3. Initialize Timer0 Registers
 */
void TIMER0_init( TIMER_ConfigType *Config_Ptr)
{
    1a0c:	fc 01       	movw	r30, r24
	if(Config_Ptr->type == TIMER0_OVF){
    1a0e:	80 81       	ld	r24, Z
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	39 f0       	breq	.+14     	; 0x1a22 <TIMER0_init+0x16>
		TCNT0=Config_Ptr->Reg_value;       // init_start;  //initial

		TCCR0 =(1<<FOC0) | (Config_Ptr->clock);  //clock
		TIMSK |=(1<<TOIE0);   //module enable
	}
	else if(Config_Ptr->type == TIMER0_CTC){
    1a14:	82 30       	cpi	r24, 0x02	; 2
    1a16:	71 f0       	breq	.+28     	; 0x1a34 <TIMER0_init+0x28>
		OCR0=Config_Ptr->Reg_value ;           //compare

		TCCR0 = (1<<FOC0) | (1<<WGM01) | (Config_Ptr->clock);    //clock
		TIMSK |=(1<<OCIE0);   //module enable
	}
	else if(Config_Ptr->type == TIMER0_Square_Wave){
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	b1 f0       	breq	.+44     	; 0x1a48 <TIMER0_init+0x3c>
		TCNT0=0;               //initial
		OCR0=Config_Ptr->Reg_value;         //compare

		TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<COM00) | (Config_Ptr->clock);    //clock
	}
	else if(Config_Ptr->type == TIMER0_Fast_PWM){
    1a1c:	84 30       	cpi	r24, 0x04	; 4
    1a1e:	e1 f0       	breq	.+56     	; 0x1a58 <TIMER0_init+0x4c>
    1a20:	08 95       	ret
 * 	3. Initialize Timer0 Registers
 */
void TIMER0_init( TIMER_ConfigType *Config_Ptr)
{
	if(Config_Ptr->type == TIMER0_OVF){
		TCNT0=Config_Ptr->Reg_value;       // init_start;  //initial
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	82 bf       	out	0x32, r24	; 50

		TCCR0 =(1<<FOC0) | (Config_Ptr->clock);  //clock
    1a26:	81 81       	ldd	r24, Z+1	; 0x01
    1a28:	80 68       	ori	r24, 0x80	; 128
    1a2a:	83 bf       	out	0x33, r24	; 51
		TIMSK |=(1<<TOIE0);   //module enable
    1a2c:	89 b7       	in	r24, 0x39	; 57
    1a2e:	81 60       	ori	r24, 0x01	; 1
    1a30:	89 bf       	out	0x39, r24	; 57
    1a32:	08 95       	ret
	}
	else if(Config_Ptr->type == TIMER0_CTC){
		TCNT0=0;                 //initial
    1a34:	12 be       	out	0x32, r1	; 50
		OCR0=Config_Ptr->Reg_value ;           //compare
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	8c bf       	out	0x3c, r24	; 60

		TCCR0 = (1<<FOC0) | (1<<WGM01) | (Config_Ptr->clock);    //clock
    1a3a:	81 81       	ldd	r24, Z+1	; 0x01
    1a3c:	88 68       	ori	r24, 0x88	; 136
    1a3e:	83 bf       	out	0x33, r24	; 51
		TIMSK |=(1<<OCIE0);   //module enable
    1a40:	89 b7       	in	r24, 0x39	; 57
    1a42:	82 60       	ori	r24, 0x02	; 2
    1a44:	89 bf       	out	0x39, r24	; 57
    1a46:	08 95       	ret
	}
	else if(Config_Ptr->type == TIMER0_Square_Wave){
		DDRB |= (1<<PB3);      //make pin output
    1a48:	bb 9a       	sbi	0x17, 3	; 23
		TCNT0=0;               //initial
    1a4a:	12 be       	out	0x32, r1	; 50
		OCR0=Config_Ptr->Reg_value;         //compare
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	8c bf       	out	0x3c, r24	; 60

		TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<COM00) | (Config_Ptr->clock);    //clock
    1a50:	81 81       	ldd	r24, Z+1	; 0x01
    1a52:	88 69       	ori	r24, 0x98	; 152
    1a54:	83 bf       	out	0x33, r24	; 51
    1a56:	08 95       	ret
	}
	else if(Config_Ptr->type == TIMER0_Fast_PWM){
		//FOCnPWM= Fclk/ (N * 256)  //N is prescaler
		//so N= Fclk/(FOCnPWM * 256)
		DDRB |= (1<<PB3);      //make pin output
    1a58:	bb 9a       	sbi	0x17, 3	; 23
		TCNT0=0;                 //initial
    1a5a:	12 be       	out	0x32, r1	; 50
		OCR0=Config_Ptr->Reg_value;                    //compare
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	8c bf       	out	0x3c, r24	; 60

		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (Config_Ptr->clock);    //clock
    1a60:	81 81       	ldd	r24, Z+1	; 0x01
    1a62:	88 66       	ori	r24, 0x68	; 104
    1a64:	83 bf       	out	0x33, r24	; 51
    1a66:	08 95       	ret

00001a68 <TIMER0_CallBack>:
}

void TIMER0_CallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_TIMER0_callBackPtr = a_ptr;
    1a68:	90 93 eb 01 	sts	0x01EB, r25
    1a6c:	80 93 ea 01 	sts	0x01EA, r24
}
    1a70:	08 95       	ret

00001a72 <TIMER1_init>:
 * 	1. Set the timer1 type.
 * 	2. Set the required clock.
 * 	3. Initialize Timer1 Registers
 */
void TIMER1_init(TIMER_ConfigType *Config_Ptr)   //need to modify
{
    1a72:	fc 01       	movw	r30, r24

	if(Config_Ptr->type == TIMER0_OVF){
    1a74:	80 81       	ld	r24, Z
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	51 f0       	breq	.+20     	; 0x1a8e <TIMER1_init+0x1c>

		TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
		TCCR1B = (Config_Ptr->clock);    //clock
		TIMSK |=(1<<TOIE1);   //module enable
	}
	else if(Config_Ptr->type == TIMER1_CTC_A){
    1a7a:	87 30       	cpi	r24, 0x07	; 7
    1a7c:	a1 f0       	breq	.+40     	; 0x1aa6 <TIMER1_init+0x34>

		TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;           //Configuration
		TCCR1B = (1<<WGM12) | (Config_Ptr->clock);    //clock
		TIMSK |=(1<<OCIE1A);    //module enable
	}
	else if(Config_Ptr->type == TIMER1_ICU){
    1a7e:	88 30       	cpi	r24, 0x08	; 8
    1a80:	09 f1       	breq	.+66     	; 0x1ac4 <TIMER1_init+0x52>
		TCCR1B = (TCCR1B & 0xB8) | ((Config_Ptr->clock)&0x07) | (1<<6);   //with rising

		/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
		TIMSK |= (1<<TICIE1);
	}
	else if(Config_Ptr->type == TIMER1_Square_Wave){
    1a82:	89 30       	cpi	r24, 0x09	; 9
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <TIMER1_init+0x16>
    1a86:	41 c0       	rjmp	.+130    	; 0x1b0a <TIMER1_init+0x98>
		OCR1A = Config_Ptr->Reg_value;;      /* Set the compare value at A */

		TCCR1A = (1<<FOC1A) | (1<<FOC1B)| (1<<COM1A0);
		TCCR1B = (1<<WGM12) | (Config_Ptr->clock);    //clock
	}
	else if(Config_Ptr->type == TIMER1_Fast_PWM){
    1a88:	8a 30       	cpi	r24, 0x0A	; 10
    1a8a:	71 f1       	breq	.+92     	; 0x1ae8 <TIMER1_init+0x76>
    1a8c:	08 95       	ret
 */
void TIMER1_init(TIMER_ConfigType *Config_Ptr)   //need to modify
{

	if(Config_Ptr->type == TIMER0_OVF){
		TCNT1=Config_Ptr->Reg_value;       // init_start;  //initial
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	9d bd       	out	0x2d, r25	; 45
    1a94:	8c bd       	out	0x2c, r24	; 44

		TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    1a96:	8c e0       	ldi	r24, 0x0C	; 12
    1a98:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = (Config_Ptr->clock);    //clock
    1a9a:	81 81       	ldd	r24, Z+1	; 0x01
    1a9c:	8e bd       	out	0x2e, r24	; 46
		TIMSK |=(1<<TOIE1);   //module enable
    1a9e:	89 b7       	in	r24, 0x39	; 57
    1aa0:	84 60       	ori	r24, 0x04	; 4
    1aa2:	89 bf       	out	0x39, r24	; 57
    1aa4:	08 95       	ret
	}
	else if(Config_Ptr->type == TIMER1_CTC_A){
		TCNT1=0;                 //initial
    1aa6:	1d bc       	out	0x2d, r1	; 45
    1aa8:	1c bc       	out	0x2c, r1	; 44
		OCR1A=Config_Ptr->Reg_value;           //compare
    1aaa:	82 81       	ldd	r24, Z+2	; 0x02
    1aac:	93 81       	ldd	r25, Z+3	; 0x03
    1aae:	9b bd       	out	0x2b, r25	; 43
    1ab0:	8a bd       	out	0x2a, r24	; 42

		TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;           //Configuration
    1ab2:	8c e0       	ldi	r24, 0x0C	; 12
    1ab4:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = (1<<WGM12) | (Config_Ptr->clock);    //clock
    1ab6:	81 81       	ldd	r24, Z+1	; 0x01
    1ab8:	88 60       	ori	r24, 0x08	; 8
    1aba:	8e bd       	out	0x2e, r24	; 46
		TIMSK |=(1<<OCIE1A);    //module enable
    1abc:	89 b7       	in	r24, 0x39	; 57
    1abe:	80 61       	ori	r24, 0x10	; 16
    1ac0:	89 bf       	out	0x39, r24	; 57
    1ac2:	08 95       	ret
	}
	else if(Config_Ptr->type == TIMER1_ICU){
		/* Configure ICP1/PD6 as i/p pin */
		DDRD &= ~(1<<PD6);
    1ac4:	8e 98       	cbi	0x11, 6	; 17

		/* Initial Value for Timer1 */
		TCNT1 = 0;
    1ac6:	1d bc       	out	0x2d, r1	; 45
    1ac8:	1c bc       	out	0x2c, r1	; 44
		/* Initial Value for the input capture register */
		ICR1  = 0;
    1aca:	17 bc       	out	0x27, r1	; 39
    1acc:	16 bc       	out	0x26, r1	; 38

		/* Timer1 always operates in Normal Mode */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1ace:	8c e0       	ldi	r24, 0x0C	; 12
    1ad0:	8f bd       	out	0x2f, r24	; 47
		/*
		 *  insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register
		 *  insert the required edge type in ICES1 bit in TCCR1B Register
		 */
		TCCR1B = (TCCR1B & 0xB8) | ((Config_Ptr->clock)&0x07) | (1<<6);   //with rising
    1ad2:	8e b5       	in	r24, 0x2e	; 46
    1ad4:	88 7b       	andi	r24, 0xB8	; 184
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	97 70       	andi	r25, 0x07	; 7
    1ada:	89 2b       	or	r24, r25
    1adc:	80 64       	ori	r24, 0x40	; 64
    1ade:	8e bd       	out	0x2e, r24	; 46

		/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
		TIMSK |= (1<<TICIE1);
    1ae0:	89 b7       	in	r24, 0x39	; 57
    1ae2:	80 62       	ori	r24, 0x20	; 32
    1ae4:	89 bf       	out	0x39, r24	; 57
    1ae6:	08 95       	ret
	}
	else if(Config_Ptr->type == TIMER1_Fast_PWM){
		// fOCnxPWM= fclk/ (N*(1+top) )
		// so (N*(1+top)=fclk/fOCnxPWM
		// so top =((fclk/fOCnxPWM)-N)/N
		DDRD |= (1<<PD5);	/* Make OC1A pin as output */
    1ae8:	8d 9a       	sbi	0x11, 5	; 17
		TCNT1 = 0;		/* Set timer1 initial count to zero */
    1aea:	1d bc       	out	0x2d, r1	; 45
    1aec:	1c bc       	out	0x2c, r1	; 44
		OCR1A = Config_Ptr->Reg_value;      /* Set the compare value at A */
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	9b bd       	out	0x2b, r25	; 43
    1af4:	8a bd       	out	0x2a, r24	; 42

		ICR1 = 2499;//top;         //2499;	/* Set TOP count for timer1 in ICR1 register */
    1af6:	83 ec       	ldi	r24, 0xC3	; 195
    1af8:	99 e0       	ldi	r25, 0x09	; 9
    1afa:	97 bd       	out	0x27, r25	; 39
    1afc:	86 bd       	out	0x26, r24	; 38
		 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
		 * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
		 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
		 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
		 */
		TCCR1A = (1<<WGM11) | (1<<COM1A1);
    1afe:	82 e8       	ldi	r24, 0x82	; 130
    1b00:	8f bd       	out	0x2f, r24	; 47

		/* Configure timer control register TCCR1A
		 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
		 * 2. Prescaler = F_CPU/64
		 */
		TCCR1B = (1<<WGM12) | (1<<WGM13) | (Config_Ptr->clock);    //clock //(1<<CS10) | (1<<CS11);
    1b02:	81 81       	ldd	r24, Z+1	; 0x01
    1b04:	88 61       	ori	r24, 0x18	; 24
    1b06:	8e bd       	out	0x2e, r24	; 46
    1b08:	08 95       	ret

		/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
		TIMSK |= (1<<TICIE1);
	}
	else if(Config_Ptr->type == TIMER1_Square_Wave){
		DDRD |= (1<<PD5);	/* Make OC1A pin as output */
    1b0a:	8d 9a       	sbi	0x11, 5	; 17
		TCNT1 = 0;		/* Set timer1 initial count to zero */
    1b0c:	1d bc       	out	0x2d, r1	; 45
    1b0e:	1c bc       	out	0x2c, r1	; 44
		OCR1A = Config_Ptr->Reg_value;;      /* Set the compare value at A */
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	9b bd       	out	0x2b, r25	; 43
    1b16:	8a bd       	out	0x2a, r24	; 42

		TCCR1A = (1<<FOC1A) | (1<<FOC1B)| (1<<COM1A0);
    1b18:	8c e4       	ldi	r24, 0x4C	; 76
    1b1a:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = (1<<WGM12) | (Config_Ptr->clock);    //clock
    1b1c:	81 81       	ldd	r24, Z+1	; 0x01
    1b1e:	88 60       	ori	r24, 0x08	; 8
    1b20:	8e bd       	out	0x2e, r24	; 46
    1b22:	08 95       	ret

00001b24 <Icu_setEdgeDetectionType>:
void Icu_setEdgeDetectionType(const Icu_EdgeType edgeType)
{
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (edgeType<<6);
    1b24:	9e b5       	in	r25, 0x2e	; 46
    1b26:	82 95       	swap	r24
    1b28:	88 0f       	add	r24, r24
    1b2a:	88 0f       	add	r24, r24
    1b2c:	80 7c       	andi	r24, 0xC0	; 192
    1b2e:	9f 7b       	andi	r25, 0xBF	; 191
    1b30:	98 2b       	or	r25, r24
    1b32:	9e bd       	out	0x2e, r25	; 46
}
    1b34:	08 95       	ret

00001b36 <Icu_getInputCaptureValue>:
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
	return ICR1;
    1b36:	26 b5       	in	r18, 0x26	; 38
    1b38:	37 b5       	in	r19, 0x27	; 39
}
    1b3a:	c9 01       	movw	r24, r18
    1b3c:	08 95       	ret

00001b3e <TIMER1_CallBack>:
 * Description: Function to set the Call Back function address.
 */
void TIMER1_CallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_TIMER1_callBackPtr = a_ptr;
    1b3e:	90 93 e9 01 	sts	0x01E9, r25
    1b42:	80 93 e8 01 	sts	0x01E8, r24
}
    1b46:	08 95       	ret

00001b48 <Timer1_Fast_PWM_n_invert_speed>:

///////////////////////////////////
void Timer1_Fast_PWM_n_invert_speed(uint16 comp_regA)
{
	OCR1A = comp_regA;      /* Set the compare value at A */
    1b48:	9b bd       	out	0x2b, r25	; 43
    1b4a:	8a bd       	out	0x2a, r24	; 42
}
    1b4c:	08 95       	ret

00001b4e <TIMER_Start>:
////////////////////
void TIMER_Start(uint8 timer_type,uint8 clk_slect){
	if(timer_type==TIMER0)
    1b4e:	88 23       	and	r24, r24
    1b50:	19 f0       	breq	.+6      	; 0x1b58 <TIMER_Start+0xa>
		TCCR0= (TCCR0&0xf8)|(clk_slect&0x07);
	else if(timer_type==TIMER1)
    1b52:	85 30       	cpi	r24, 0x05	; 5
    1b54:	39 f0       	breq	.+14     	; 0x1b64 <TIMER_Start+0x16>
    1b56:	08 95       	ret
	OCR1A = comp_regA;      /* Set the compare value at A */
}
////////////////////
void TIMER_Start(uint8 timer_type,uint8 clk_slect){
	if(timer_type==TIMER0)
		TCCR0= (TCCR0&0xf8)|(clk_slect&0x07);
    1b58:	83 b7       	in	r24, 0x33	; 51
    1b5a:	67 70       	andi	r22, 0x07	; 7
    1b5c:	88 7f       	andi	r24, 0xF8	; 248
    1b5e:	86 2b       	or	r24, r22
    1b60:	83 bf       	out	0x33, r24	; 51
    1b62:	08 95       	ret
	else if(timer_type==TIMER1)
		TCCR1B=(TCCR1B&0xf8)| (clk_slect&0x07);
    1b64:	8e b5       	in	r24, 0x2e	; 46
    1b66:	67 70       	andi	r22, 0x07	; 7
    1b68:	88 7f       	andi	r24, 0xF8	; 248
    1b6a:	86 2b       	or	r24, r22
    1b6c:	8e bd       	out	0x2e, r24	; 46
    1b6e:	08 95       	ret

00001b70 <TIMER_Stop>:

}
/* Disable timers  */
void TIMER_Stop(uint8 timer_type){
	if(timer_type==TIMER0)
    1b70:	88 23       	and	r24, r24
    1b72:	19 f0       	breq	.+6      	; 0x1b7a <TIMER_Stop+0xa>
		TCCR0&=~0x07;
	else if(timer_type==TIMER1)
    1b74:	85 30       	cpi	r24, 0x05	; 5
    1b76:	29 f0       	breq	.+10     	; 0x1b82 <TIMER_Stop+0x12>
    1b78:	08 95       	ret

}
/* Disable timers  */
void TIMER_Stop(uint8 timer_type){
	if(timer_type==TIMER0)
		TCCR0&=~0x07;
    1b7a:	83 b7       	in	r24, 0x33	; 51
    1b7c:	88 7f       	andi	r24, 0xF8	; 248
    1b7e:	83 bf       	out	0x33, r24	; 51
    1b80:	08 95       	ret
	else if(timer_type==TIMER1)
		TCCR1B&=~0x07;
    1b82:	8e b5       	in	r24, 0x2e	; 46
    1b84:	88 7f       	andi	r24, 0xF8	; 248
    1b86:	8e bd       	out	0x2e, r24	; 46
    1b88:	08 95       	ret

00001b8a <TIMER_Clear>:
/*
 * Description: Function to clear the Timers Value to start count from ZERO
 */
void TIMER_Clear(uint8 timer_type)
{
	if(timer_type==TIMER0)
    1b8a:	88 23       	and	r24, r24
    1b8c:	19 f0       	breq	.+6      	; 0x1b94 <TIMER_Clear+0xa>
		TCNT0 = 0;
	else if(timer_type==TIMER1)
    1b8e:	85 30       	cpi	r24, 0x05	; 5
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <TIMER_Clear+0xe>
    1b92:	08 95       	ret
 * Description: Function to clear the Timers Value to start count from ZERO
 */
void TIMER_Clear(uint8 timer_type)
{
	if(timer_type==TIMER0)
		TCNT0 = 0;
    1b94:	12 be       	out	0x32, r1	; 50
    1b96:	08 95       	ret
	else if(timer_type==TIMER1)
		TCNT1 = 0;
    1b98:	1d bc       	out	0x2d, r1	; 45
    1b9a:	1c bc       	out	0x2c, r1	; 44
    1b9c:	08 95       	ret

00001b9e <TIMER_Deinit>:
 * Description: Function to disable the Timers to stop it
 */
void TIMER_Deinit(uint8 timer_type)
{
	/* disable the Timer0 to stop it*/
	if(timer_type==TIMER0){
    1b9e:	88 23       	and	r24, r24
    1ba0:	19 f0       	breq	.+6      	; 0x1ba8 <TIMER_Deinit+0xa>

		/* Disable timer 0 interrupt */
		TIMSK &= ~((1<<TOIE0)|(1<<OCIE0));
	}
	/* disable the Timer1 to stop it*/
	else if(timer_type==TIMER1){
    1ba2:	85 30       	cpi	r24, 0x05	; 5
    1ba4:	41 f0       	breq	.+16     	; 0x1bb6 <TIMER_Deinit+0x18>
    1ba6:	08 95       	ret
void TIMER_Deinit(uint8 timer_type)
{
	/* disable the Timer0 to stop it*/
	if(timer_type==TIMER0){
		/* Clear All Timer0 Registers */
		TCCR0 = 0;
    1ba8:	13 be       	out	0x33, r1	; 51
		TCNT0 = 0;
    1baa:	12 be       	out	0x32, r1	; 50
		OCR0  = 0;
    1bac:	1c be       	out	0x3c, r1	; 60

		/* Disable timer 0 interrupt */
		TIMSK &= ~((1<<TOIE0)|(1<<OCIE0));
    1bae:	89 b7       	in	r24, 0x39	; 57
    1bb0:	8c 7f       	andi	r24, 0xFC	; 252
    1bb2:	89 bf       	out	0x39, r24	; 57
    1bb4:	08 95       	ret
	}
	/* disable the Timer1 to stop it*/
	else if(timer_type==TIMER1){
		/* Clear All Timer1 Registers */
		TCCR1A = 0;
    1bb6:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = 0;
    1bb8:	1e bc       	out	0x2e, r1	; 46
		TCNT1 = 0;
    1bba:	1d bc       	out	0x2d, r1	; 45
    1bbc:	1c bc       	out	0x2c, r1	; 44
		OCR1A = 0 ;
    1bbe:	1b bc       	out	0x2b, r1	; 43
    1bc0:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0 ;
    1bc2:	19 bc       	out	0x29, r1	; 41
    1bc4:	18 bc       	out	0x28, r1	; 40
		ICR1 = 0;
    1bc6:	17 bc       	out	0x27, r1	; 39
    1bc8:	16 bc       	out	0x26, r1	; 38

		/* Disable the timer1 interrupt */
		TIMSK &= ~((1<<TOIE1)|(1<<OCIE1A)|(1<<OCIE1B)|(1<<TICIE1));
    1bca:	89 b7       	in	r24, 0x39	; 57
    1bcc:	83 7c       	andi	r24, 0xC3	; 195
    1bce:	89 bf       	out	0x39, r24	; 57
    1bd0:	08 95       	ret

00001bd2 <WDT_ON>:


#endif
/*w d timer */
void WDT_ON(uint8 WDClk){
	WDTCR= (1<<WDE)|(WDClk);
    1bd2:	88 60       	ori	r24, 0x08	; 8
    1bd4:	81 bd       	out	0x21, r24	; 33
}
    1bd6:	08 95       	ret

00001bd8 <WDT_OFF>:

void WDT_OFF(uint8 four_cycles){
    1bd8:	af 92       	push	r10
    1bda:	bf 92       	push	r11
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
	WDTCR=(1<<WDE)|(1<<WDTOE);
    1be8:	98 e1       	ldi	r25, 0x18	; 24
    1bea:	91 bd       	out	0x21, r25	; 33
	_delay_us(four_cycles);
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a0 e0       	ldi	r26, 0x00	; 0
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1bfa:	5b 01       	movw	r10, r22
    1bfc:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bfe:	2b ea       	ldi	r18, 0xAB	; 171
    1c00:	3a ea       	ldi	r19, 0xAA	; 170
    1c02:	4a e2       	ldi	r20, 0x2A	; 42
    1c04:	50 e4       	ldi	r21, 0x40	; 64
    1c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0a:	7b 01       	movw	r14, r22
    1c0c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	0c f4       	brge	.+2      	; 0x1c20 <WDT_OFF+0x48>
    1c1e:	55 c0       	rjmp	.+170    	; 0x1cca <WDT_OFF+0xf2>
		__ticks = 1;
	else if (__tmp > 255)
    1c20:	c8 01       	movw	r24, r16
    1c22:	b7 01       	movw	r22, r14
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4f e7       	ldi	r20, 0x7F	; 127
    1c2a:	53 e4       	ldi	r21, 0x43	; 67
    1c2c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c30:	18 16       	cp	r1, r24
    1c32:	94 f0       	brlt	.+36     	; 0x1c58 <WDT_OFF+0x80>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c34:	c8 01       	movw	r24, r16
    1c36:	b7 01       	movw	r22, r14
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c3c:	6a 95       	dec	r22
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <WDT_OFF+0x64>
	WDTCR&=~(1<<WDE);
    1c40:	81 b5       	in	r24, 0x21	; 33
    1c42:	87 7f       	andi	r24, 0xF7	; 247
    1c44:	81 bd       	out	0x21, r24	; 33
}
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	ff 90       	pop	r15
    1c4c:	ef 90       	pop	r14
    1c4e:	df 90       	pop	r13
    1c50:	cf 90       	pop	r12
    1c52:	bf 90       	pop	r11
    1c54:	af 90       	pop	r10
    1c56:	08 95       	ret
	double __tmp = ((F_CPU) / 3e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 255)
	{
		_delay_ms(__us / 1000.0);
    1c58:	c6 01       	movw	r24, r12
    1c5a:	b5 01       	movw	r22, r10
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a e7       	ldi	r20, 0x7A	; 122
    1c62:	54 e4       	ldi	r21, 0x44	; 68
    1c64:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c68:	5b 01       	movw	r10, r22
    1c6a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	4a ef       	ldi	r20, 0xFA	; 250
    1c72:	54 e4       	ldi	r21, 0x44	; 68
    1c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c78:	7b 01       	movw	r14, r22
    1c7a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e8       	ldi	r20, 0x80	; 128
    1c82:	5f e3       	ldi	r21, 0x3F	; 63
    1c84:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c88:	88 23       	and	r24, r24
    1c8a:	4c f1       	brlt	.+82     	; 0x1cde <WDT_OFF+0x106>
		__ticks = 1;
	else if (__tmp > 65535)
    1c8c:	c8 01       	movw	r24, r16
    1c8e:	b7 01       	movw	r22, r14
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	3f ef       	ldi	r19, 0xFF	; 255
    1c94:	4f e7       	ldi	r20, 0x7F	; 127
    1c96:	57 e4       	ldi	r21, 0x47	; 71
    1c98:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c9c:	18 16       	cp	r1, r24
    1c9e:	bc f4       	brge	.+46     	; 0x1cce <WDT_OFF+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca0:	c6 01       	movw	r24, r12
    1ca2:	b5 01       	movw	r22, r10
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e2       	ldi	r20, 0x20	; 32
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	cb 01       	movw	r24, r22
		while(__ticks)
    1cb6:	67 2b       	or	r22, r23
    1cb8:	19 f2       	breq	.-122    	; 0x1c40 <WDT_OFF+0x68>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cba:	28 ec       	ldi	r18, 0xC8	; 200
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	31 97       	sbiw	r30, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <WDT_OFF+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc6:	d9 f7       	brne	.-10     	; 0x1cbe <WDT_OFF+0xe6>
    1cc8:	bb cf       	rjmp	.-138    	; 0x1c40 <WDT_OFF+0x68>
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
	if (__tmp < 1.0)
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	b7 cf       	rjmp	.-146    	; 0x1c3c <WDT_OFF+0x64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	c8 01       	movw	r24, r16
    1cd0:	b7 01       	movw	r22, r14
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <WDT_OFF+0x100>
    1cdc:	b1 cf       	rjmp	.-158    	; 0x1c40 <WDT_OFF+0x68>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	f9 cf       	rjmp	.-14     	; 0x1cd6 <WDT_OFF+0xfe>

00001ce4 <__mulsi3>:
    1ce4:	62 9f       	mul	r22, r18
    1ce6:	d0 01       	movw	r26, r0
    1ce8:	73 9f       	mul	r23, r19
    1cea:	f0 01       	movw	r30, r0
    1cec:	82 9f       	mul	r24, r18
    1cee:	e0 0d       	add	r30, r0
    1cf0:	f1 1d       	adc	r31, r1
    1cf2:	64 9f       	mul	r22, r20
    1cf4:	e0 0d       	add	r30, r0
    1cf6:	f1 1d       	adc	r31, r1
    1cf8:	92 9f       	mul	r25, r18
    1cfa:	f0 0d       	add	r31, r0
    1cfc:	83 9f       	mul	r24, r19
    1cfe:	f0 0d       	add	r31, r0
    1d00:	74 9f       	mul	r23, r20
    1d02:	f0 0d       	add	r31, r0
    1d04:	65 9f       	mul	r22, r21
    1d06:	f0 0d       	add	r31, r0
    1d08:	99 27       	eor	r25, r25
    1d0a:	72 9f       	mul	r23, r18
    1d0c:	b0 0d       	add	r27, r0
    1d0e:	e1 1d       	adc	r30, r1
    1d10:	f9 1f       	adc	r31, r25
    1d12:	63 9f       	mul	r22, r19
    1d14:	b0 0d       	add	r27, r0
    1d16:	e1 1d       	adc	r30, r1
    1d18:	f9 1f       	adc	r31, r25
    1d1a:	bd 01       	movw	r22, r26
    1d1c:	cf 01       	movw	r24, r30
    1d1e:	11 24       	eor	r1, r1
    1d20:	08 95       	ret

00001d22 <__divmodhi4>:
    1d22:	97 fb       	bst	r25, 7
    1d24:	09 2e       	mov	r0, r25
    1d26:	07 26       	eor	r0, r23
    1d28:	0a d0       	rcall	.+20     	; 0x1d3e <__divmodhi4_neg1>
    1d2a:	77 fd       	sbrc	r23, 7
    1d2c:	04 d0       	rcall	.+8      	; 0x1d36 <__divmodhi4_neg2>
    1d2e:	27 d0       	rcall	.+78     	; 0x1d7e <__udivmodhi4>
    1d30:	06 d0       	rcall	.+12     	; 0x1d3e <__divmodhi4_neg1>
    1d32:	00 20       	and	r0, r0
    1d34:	1a f4       	brpl	.+6      	; 0x1d3c <__divmodhi4_exit>

00001d36 <__divmodhi4_neg2>:
    1d36:	70 95       	com	r23
    1d38:	61 95       	neg	r22
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255

00001d3c <__divmodhi4_exit>:
    1d3c:	08 95       	ret

00001d3e <__divmodhi4_neg1>:
    1d3e:	f6 f7       	brtc	.-4      	; 0x1d3c <__divmodhi4_exit>
    1d40:	90 95       	com	r25
    1d42:	81 95       	neg	r24
    1d44:	9f 4f       	sbci	r25, 0xFF	; 255
    1d46:	08 95       	ret

00001d48 <__divmodsi4>:
    1d48:	97 fb       	bst	r25, 7
    1d4a:	09 2e       	mov	r0, r25
    1d4c:	05 26       	eor	r0, r21
    1d4e:	0e d0       	rcall	.+28     	; 0x1d6c <__divmodsi4_neg1>
    1d50:	57 fd       	sbrc	r21, 7
    1d52:	04 d0       	rcall	.+8      	; 0x1d5c <__divmodsi4_neg2>
    1d54:	28 d0       	rcall	.+80     	; 0x1da6 <__udivmodsi4>
    1d56:	0a d0       	rcall	.+20     	; 0x1d6c <__divmodsi4_neg1>
    1d58:	00 1c       	adc	r0, r0
    1d5a:	38 f4       	brcc	.+14     	; 0x1d6a <__divmodsi4_exit>

00001d5c <__divmodsi4_neg2>:
    1d5c:	50 95       	com	r21
    1d5e:	40 95       	com	r20
    1d60:	30 95       	com	r19
    1d62:	21 95       	neg	r18
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	4f 4f       	sbci	r20, 0xFF	; 255
    1d68:	5f 4f       	sbci	r21, 0xFF	; 255

00001d6a <__divmodsi4_exit>:
    1d6a:	08 95       	ret

00001d6c <__divmodsi4_neg1>:
    1d6c:	f6 f7       	brtc	.-4      	; 0x1d6a <__divmodsi4_exit>
    1d6e:	90 95       	com	r25
    1d70:	80 95       	com	r24
    1d72:	70 95       	com	r23
    1d74:	61 95       	neg	r22
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7c:	08 95       	ret

00001d7e <__udivmodhi4>:
    1d7e:	aa 1b       	sub	r26, r26
    1d80:	bb 1b       	sub	r27, r27
    1d82:	51 e1       	ldi	r21, 0x11	; 17
    1d84:	07 c0       	rjmp	.+14     	; 0x1d94 <__udivmodhi4_ep>

00001d86 <__udivmodhi4_loop>:
    1d86:	aa 1f       	adc	r26, r26
    1d88:	bb 1f       	adc	r27, r27
    1d8a:	a6 17       	cp	r26, r22
    1d8c:	b7 07       	cpc	r27, r23
    1d8e:	10 f0       	brcs	.+4      	; 0x1d94 <__udivmodhi4_ep>
    1d90:	a6 1b       	sub	r26, r22
    1d92:	b7 0b       	sbc	r27, r23

00001d94 <__udivmodhi4_ep>:
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	5a 95       	dec	r21
    1d9a:	a9 f7       	brne	.-22     	; 0x1d86 <__udivmodhi4_loop>
    1d9c:	80 95       	com	r24
    1d9e:	90 95       	com	r25
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	08 95       	ret

00001da6 <__udivmodsi4>:
    1da6:	a1 e2       	ldi	r26, 0x21	; 33
    1da8:	1a 2e       	mov	r1, r26
    1daa:	aa 1b       	sub	r26, r26
    1dac:	bb 1b       	sub	r27, r27
    1dae:	fd 01       	movw	r30, r26
    1db0:	0d c0       	rjmp	.+26     	; 0x1dcc <__udivmodsi4_ep>

00001db2 <__udivmodsi4_loop>:
    1db2:	aa 1f       	adc	r26, r26
    1db4:	bb 1f       	adc	r27, r27
    1db6:	ee 1f       	adc	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	a2 17       	cp	r26, r18
    1dbc:	b3 07       	cpc	r27, r19
    1dbe:	e4 07       	cpc	r30, r20
    1dc0:	f5 07       	cpc	r31, r21
    1dc2:	20 f0       	brcs	.+8      	; 0x1dcc <__udivmodsi4_ep>
    1dc4:	a2 1b       	sub	r26, r18
    1dc6:	b3 0b       	sbc	r27, r19
    1dc8:	e4 0b       	sbc	r30, r20
    1dca:	f5 0b       	sbc	r31, r21

00001dcc <__udivmodsi4_ep>:
    1dcc:	66 1f       	adc	r22, r22
    1dce:	77 1f       	adc	r23, r23
    1dd0:	88 1f       	adc	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	1a 94       	dec	r1
    1dd6:	69 f7       	brne	.-38     	; 0x1db2 <__udivmodsi4_loop>
    1dd8:	60 95       	com	r22
    1dda:	70 95       	com	r23
    1ddc:	80 95       	com	r24
    1dde:	90 95       	com	r25
    1de0:	9b 01       	movw	r18, r22
    1de2:	ac 01       	movw	r20, r24
    1de4:	bd 01       	movw	r22, r26
    1de6:	cf 01       	movw	r24, r30
    1de8:	08 95       	ret

00001dea <__prologue_saves__>:
    1dea:	2f 92       	push	r2
    1dec:	3f 92       	push	r3
    1dee:	4f 92       	push	r4
    1df0:	5f 92       	push	r5
    1df2:	6f 92       	push	r6
    1df4:	7f 92       	push	r7
    1df6:	8f 92       	push	r8
    1df8:	9f 92       	push	r9
    1dfa:	af 92       	push	r10
    1dfc:	bf 92       	push	r11
    1dfe:	cf 92       	push	r12
    1e00:	df 92       	push	r13
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	ca 1b       	sub	r28, r26
    1e14:	db 0b       	sbc	r29, r27
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	09 94       	ijmp

00001e22 <__epilogue_restores__>:
    1e22:	2a 88       	ldd	r2, Y+18	; 0x12
    1e24:	39 88       	ldd	r3, Y+17	; 0x11
    1e26:	48 88       	ldd	r4, Y+16	; 0x10
    1e28:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e30:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e32:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e34:	b9 84       	ldd	r11, Y+9	; 0x09
    1e36:	c8 84       	ldd	r12, Y+8	; 0x08
    1e38:	df 80       	ldd	r13, Y+7	; 0x07
    1e3a:	ee 80       	ldd	r14, Y+6	; 0x06
    1e3c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e3e:	0c 81       	ldd	r16, Y+4	; 0x04
    1e40:	1b 81       	ldd	r17, Y+3	; 0x03
    1e42:	aa 81       	ldd	r26, Y+2	; 0x02
    1e44:	b9 81       	ldd	r27, Y+1	; 0x01
    1e46:	ce 0f       	add	r28, r30
    1e48:	d1 1d       	adc	r29, r1
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	ed 01       	movw	r28, r26
    1e56:	08 95       	ret

00001e58 <_exit>:
    1e58:	f8 94       	cli

00001e5a <__stop_program>:
    1e5a:	ff cf       	rjmp	.-2      	; 0x1e5a <__stop_program>
